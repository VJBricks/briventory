# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET         /                                 controllers.GlobalController.index(request: Request)
GET         /credits                          controllers.PublicController.credits(request: Request)

GET         /maintenance                      controllers.MaintenanceController.maintenance(request: Request)
GET         /status                           controllers.MaintenanceController.status(request: Request)

GET         /auth/signin                      controllers.auth.PublicAuthController.signIn(request: Request, redirectUrl: String)
POST        /auth/signin                      controllers.auth.PublicAuthController.doSignIn(request: Request)
GET         /auth/admin/signup                controllers.auth.PublicAuthController.adminSignUp(request: Request)
POST        /auth/admin/signup                controllers.auth.PublicAuthController.doAdminSignUp(request: Request)
GET         /auth/signout                     controllers.auth.SecuredAuth.signOut()

GET         /account/activities               controllers.accounts.AccountsController.activity(request: Request)
GET         /account/settings                 controllers.accounts.AccountsController.settings(request: Request)
GET         /account/settings/js              controllers.accounts.AccountsController.settingsJs(request: Request)
POST        /account/settings/email           controllers.accounts.AccountsController.updateEmail(request: Request)
POST        /account/settings/name            controllers.accounts.AccountsController.updateName(request: Request)
POST        /account/settings/credentials     controllers.accounts.AccountsController.updateCredentials(request: Request)
POST        /account/settings/bricklink       controllers.accounts.AccountsController.updateBrickLinkTokens(request: Request)
+noCSRF
DELETE      /account/settings/bricklink       controllers.accounts.AccountsController.deleteBrickLinkTokens(request: Request)
POST        /account/settings/brickset        controllers.accounts.AccountsController.updateBrickSetTokens(request: Request)
+noCSRF
DELETE      /account/settings/brickset        controllers.accounts.AccountsController.deleteBrickSetTokens(request: Request)
POST        /account/settings/rebrickable     controllers.accounts.AccountsController.updateRebrickableTokens(request: Request)
+noCSRF
DELETE      /account/settings/rebrickable     controllers.accounts.AccountsController.deleteRebrickableTokens(request: Request)

GET         /storage                          controllers.storage.StorageController.storage(request: Request)
GET         /storage/js                       controllers.storage.StorageController.js(request: Request)
+noCSRF
POST        /storage/containers               controllers.storage.StorageController.containers(request: Request)
GET         /storage/lockers                  controllers.storage.StorageController.lockers(request: Request)
GET         /storage/lockerSizes              controllers.storage.StorageController.lockerSizes(request: Request)

GET         /settings/bricklink               controllers.settings.SettingsController.bricklink(request: Request)
GET         /settings/colors                  controllers.settings.SettingsController.colors(request: Request)
GET         /settings/categories              controllers.settings.SettingsController.categories(request: Request)
GET         /settings/parts                   controllers.settings.SettingsController.parts(request: Request)
GET         /settings/sets                    controllers.settings.SettingsController.sets(request: Request)
GET         /settings/minifigures             controllers.settings.SettingsController.miniFigures(request: Request)
GET         /settings/gears                   controllers.settings.SettingsController.gears(request: Request)
GET         /settings/elements                controllers.settings.SettingsController.elements(request: Request)

GET         /mf                               controllers.MiniFiguresController.index(request: Request)

POST        /bricklink/callback               controllers.BrickLinkController.callback(request: Request)
GET         /bricklink/sync/catalog           controllers.BrickLinkController.syncCatalog(request: Request)
GET         /bricklink/sync/inventory         controllers.BrickLinkController.syncInventory(request: Request)
GET         /bricklink/sync/orders            controllers.BrickLinkController.syncOrders(request: Request)

# Map static resources from the /public folder to the /assets URL path
GET         /assets/*file                     controllers.Assets.versioned(path="/public", file: Asset)
GET         /robots.txt                       controllers.Assets.at(path="/public", file="robots.txt")

# WebJars Asstes
->          /webjars                          webjars.Routes
