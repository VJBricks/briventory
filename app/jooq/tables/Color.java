/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import jooq.Keys;
import jooq.Public;
import jooq.tables.ColorInfo.ColorInfoPath;
import jooq.tables.ColorSource.ColorSourcePath;
import jooq.tables.records.ColorRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;
import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Color extends TableImpl<ColorRecord> {

    private static final long serialVersionUID = 1367291274;

    /**
     * The reference instance of <code>public.color</code>
     */
    public static final Color COLOR = new Color();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<ColorRecord> getRecordType() {
        return ColorRecord.class;
    }

    /**
     * The column <code>public.color.id</code>.
     */
    public final TableField<ColorRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    private Color(Name alias, Table<ColorRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Color(Name alias, Table<ColorRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.color</code> table reference
     */
    public Color(String alias) {
        this(DSL.name(alias), COLOR);
    }

    /**
     * Create an aliased <code>public.color</code> table reference
     */
    public Color(Name alias) {
        this(alias, COLOR);
    }

    /**
     * Create a <code>public.color</code> table reference
     */
    public Color() {
        this(DSL.name("color"), null);
    }

    public <O extends Record> Color(Table<O> path, ForeignKey<O, ColorRecord> childPath, InverseForeignKey<O, ColorRecord> parentPath) {
        super(path, childPath, parentPath, COLOR);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ColorPath extends Color implements Path<ColorRecord> {

        private static final long serialVersionUID = 1367291274;
        public <O extends Record> ColorPath(Table<O> path, ForeignKey<O, ColorRecord> childPath, InverseForeignKey<O, ColorRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ColorPath(Name alias, Table<ColorRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ColorPath as(String alias) {
            return new ColorPath(DSL.name(alias), this);
        }

        @Override
        public ColorPath as(Name alias) {
            return new ColorPath(alias, this);
        }

        @Override
        public ColorPath as(Table<?> alias) {
            return new ColorPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public Identity<ColorRecord, Long> getIdentity() {
        return (Identity<ColorRecord, Long>) super.getIdentity();
    }

    @Override
    @Nonnull
    public UniqueKey<ColorRecord> getPrimaryKey() {
        return Keys.PK_COLOR;
    }

    private transient ColorInfoPath _colorInfo;

    /**
     * Get the implicit to-many join path to the <code>public.color_info</code>
     * table
     */
    public ColorInfoPath colorInfo() {
        if (_colorInfo == null)
            _colorInfo = new ColorInfoPath(this, null, Keys.COLOR_INFO__FK_COLOR_INFO_TO_COLOR.getInverseKey());

        return _colorInfo;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.color_source</code> table
     */
    public ColorSourcePath colorSource() {
        return colorInfo().colorSource();
    }

    @Override
    @Nonnull
    public Color as(String alias) {
        return new Color(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public Color as(Name alias) {
        return new Color(alias, this);
    }

    @Override
    @Nonnull
    public Color as(Table<?> alias) {
        return new Color(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Color rename(String name) {
        return new Color(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Color rename(Name name) {
        return new Color(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Color rename(Table<?> name) {
        return new Color(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Color where(Condition condition) {
        return new Color(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Color where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Color where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Color where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public Color where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public Color where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public Color where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public Color where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Color whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Color whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
