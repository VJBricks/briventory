/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import jooq.Keys;
import jooq.Public;
import jooq.tables.records.ContainerTypeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContainerType extends TableImpl<ContainerTypeRecord> {

    private static final long serialVersionUID = -1674046727;

    /**
     * The reference instance of <code>public.container_type</code>
     */
    public static final ContainerType CONTAINER_TYPE = new ContainerType();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<ContainerTypeRecord> getRecordType() {
        return ContainerTypeRecord.class;
    }

    /**
     * The column <code>public.container_type.id</code>.
     */
    public final TableField<ContainerTypeRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.container_type.name</code>.
     */
    public final TableField<ContainerTypeRecord, String> NAME = createField(DSL.name("name"), jooq.Domains.DOMAIN_NAME.getDataType(), this, "");

    /**
     * The column <code>public.container_type.min_lockers</code>.
     */
    public final TableField<ContainerTypeRecord, Short> MIN_LOCKERS = createField(DSL.name("min_lockers"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.container_type.max_lockers</code>.
     */
    public final TableField<ContainerTypeRecord, Short> MAX_LOCKERS = createField(DSL.name("max_lockers"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.container_type.number_formatting</code>.
     */
    public final TableField<ContainerTypeRecord, String> NUMBER_FORMATTING = createField(DSL.name("number_formatting"), jooq.Domains.DOMAIN_FORMAT_STRING.getDataType(), this, "");

    private ContainerType(Name alias, Table<ContainerTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private ContainerType(Name alias, Table<ContainerTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.container_type</code> table reference
     */
    public ContainerType(String alias) {
        this(DSL.name(alias), CONTAINER_TYPE);
    }

    /**
     * Create an aliased <code>public.container_type</code> table reference
     */
    public ContainerType(Name alias) {
        this(alias, CONTAINER_TYPE);
    }

    /**
     * Create a <code>public.container_type</code> table reference
     */
    public ContainerType() {
        this(DSL.name("container_type"), null);
    }

    public <O extends Record> ContainerType(Table<O> child, ForeignKey<O, ContainerTypeRecord> key) {
        super(child, key, CONTAINER_TYPE);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public Identity<ContainerTypeRecord, Long> getIdentity() {
        return (Identity<ContainerTypeRecord, Long>) super.getIdentity();
    }

    @Override
    @Nonnull
    public UniqueKey<ContainerTypeRecord> getPrimaryKey() {
        return Keys.PK_CONTAINER_TYPE;
    }

    @Override
    @Nonnull
    public ContainerType as(String alias) {
        return new ContainerType(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public ContainerType as(Name alias) {
        return new ContainerType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ContainerType rename(String name) {
        return new ContainerType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ContainerType rename(Name name) {
        return new ContainerType(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row5<Long, String, Short, Short, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
