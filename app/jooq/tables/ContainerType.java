/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import jooq.Domains;
import jooq.Keys;
import jooq.Public;
import jooq.tables.AllowedItemTypes.AllowedItemTypesPath;
import jooq.tables.Container.ContainerPath;
import jooq.tables.ItemType.ItemTypePath;
import jooq.tables.records.ContainerTypeRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;
import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ContainerType extends TableImpl<ContainerTypeRecord> {

    private static final long serialVersionUID = -102680990;

    /**
     * The reference instance of <code>public.container_type</code>
     */
    public static final ContainerType CONTAINER_TYPE = new ContainerType();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<ContainerTypeRecord> getRecordType() {
        return ContainerTypeRecord.class;
    }

    /**
     * The column <code>public.container_type.id</code>.
     */
    public final TableField<ContainerTypeRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.container_type.name</code>.
     */
    public final TableField<ContainerTypeRecord, String> NAME = createField(DSL.name("name"), Domains.DOMAIN_NAME.getDataType().nullable(false), this, "");

    /**
     * The column <code>public.container_type.min_lockers</code>.
     */
    public final TableField<ContainerTypeRecord, Short> MIN_LOCKERS = createField(DSL.name("min_lockers"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.container_type.max_lockers</code>.
     */
    public final TableField<ContainerTypeRecord, Short> MAX_LOCKERS = createField(DSL.name("max_lockers"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.container_type.number_formatting</code>.
     */
    public final TableField<ContainerTypeRecord, String> NUMBER_FORMATTING = createField(DSL.name("number_formatting"), Domains.DOMAIN_FORMAT_STRING.getDataType().nullable(false).defaultValue(DSL.field(DSL.raw("'%d'::character varying"), Domains.DOMAIN_FORMAT_STRING.getDataType())), this, "");

    private ContainerType(Name alias, Table<ContainerTypeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ContainerType(Name alias, Table<ContainerTypeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.container_type</code> table reference
     */
    public ContainerType(String alias) {
        this(DSL.name(alias), CONTAINER_TYPE);
    }

    /**
     * Create an aliased <code>public.container_type</code> table reference
     */
    public ContainerType(Name alias) {
        this(alias, CONTAINER_TYPE);
    }

    /**
     * Create a <code>public.container_type</code> table reference
     */
    public ContainerType() {
        this(DSL.name("container_type"), null);
    }

    public <O extends Record> ContainerType(Table<O> path, ForeignKey<O, ContainerTypeRecord> childPath, InverseForeignKey<O, ContainerTypeRecord> parentPath) {
        super(path, childPath, parentPath, CONTAINER_TYPE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ContainerTypePath extends ContainerType implements Path<ContainerTypeRecord> {

        private static final long serialVersionUID = -102680990;
        public <O extends Record> ContainerTypePath(Table<O> path, ForeignKey<O, ContainerTypeRecord> childPath, InverseForeignKey<O, ContainerTypeRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ContainerTypePath(Name alias, Table<ContainerTypeRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ContainerTypePath as(String alias) {
            return new ContainerTypePath(DSL.name(alias), this);
        }

        @Override
        public ContainerTypePath as(Name alias) {
            return new ContainerTypePath(alias, this);
        }

        @Override
        public ContainerTypePath as(Table<?> alias) {
            return new ContainerTypePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public Identity<ContainerTypeRecord, Long> getIdentity() {
        return (Identity<ContainerTypeRecord, Long>) super.getIdentity();
    }

    @Override
    @Nonnull
    public UniqueKey<ContainerTypeRecord> getPrimaryKey() {
        return Keys.PK_CONTAINER_TYPE;
    }

    private transient AllowedItemTypesPath _allowedItemTypes;

    /**
     * Get the implicit to-many join path to the
     * <code>public.allowed_item_types</code> table
     */
    public AllowedItemTypesPath allowedItemTypes() {
        if (_allowedItemTypes == null)
            _allowedItemTypes = new AllowedItemTypesPath(this, null, Keys.ALLOWED_ITEM_TYPES__FK_ALLOWED_ITEM_TYPES_TO_CONTAINER_TYPE.getInverseKey());

        return _allowedItemTypes;
    }

    private transient ContainerPath _container;

    /**
     * Get the implicit to-many join path to the <code>public.container</code>
     * table
     */
    public ContainerPath container() {
        if (_container == null)
            _container = new ContainerPath(this, null, Keys.CONTAINER__FK_CONTAINER_TO_CONTAINER_TYPE.getInverseKey());

        return _container;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.item_type</code> table
     */
    public ItemTypePath itemType() {
        return allowedItemTypes().itemType();
    }

    @Override
    @Nonnull
    public ContainerType as(String alias) {
        return new ContainerType(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public ContainerType as(Name alias) {
        return new ContainerType(alias, this);
    }

    @Override
    @Nonnull
    public ContainerType as(Table<?> alias) {
        return new ContainerType(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ContainerType rename(String name) {
        return new ContainerType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ContainerType rename(Name name) {
        return new ContainerType(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ContainerType rename(Table<?> name) {
        return new ContainerType(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ContainerType where(Condition condition) {
        return new ContainerType(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ContainerType where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ContainerType where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ContainerType where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ContainerType where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ContainerType where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ContainerType where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ContainerType where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ContainerType whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ContainerType whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
