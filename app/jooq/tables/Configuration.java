/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import jooq.Public;
import jooq.tables.records.ConfigurationRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Configuration extends TableImpl<ConfigurationRecord> {

    private static final long serialVersionUID = -1595714056;

    /**
     * The reference instance of <code>public.configuration</code>
     */
    public static final Configuration CONFIGURATION = new Configuration();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<ConfigurationRecord> getRecordType() {
        return ConfigurationRecord.class;
    }

    /**
     * The column <code>public.configuration.database_revision</code>. The
     * database revision follow the semantic versioning rules
     * (https://semver.org).
     */
    public final TableField<ConfigurationRecord, String> DATABASE_REVISION = createField(DSL.name("database_revision"), jooq.Domains.DOMAIN_REVISION.getDataType(), this, "The database revision follow the semantic versioning rules (https://semver.org).");

    private Configuration(Name alias, Table<ConfigurationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Configuration(Name alias, Table<ConfigurationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.configuration</code> table reference
     */
    public Configuration(String alias) {
        this(DSL.name(alias), CONFIGURATION);
    }

    /**
     * Create an aliased <code>public.configuration</code> table reference
     */
    public Configuration(Name alias) {
        this(alias, CONFIGURATION);
    }

    /**
     * Create a <code>public.configuration</code> table reference
     */
    public Configuration() {
        this(DSL.name("configuration"), null);
    }

    public <O extends Record> Configuration(Table<O> child, ForeignKey<O, ConfigurationRecord> key) {
        super(child, key, CONFIGURATION);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public Configuration as(String alias) {
        return new Configuration(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public Configuration as(Name alias) {
        return new Configuration(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Configuration rename(String name) {
        return new Configuration(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Configuration rename(Name name) {
        return new Configuration(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
