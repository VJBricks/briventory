/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import jooq.Keys;
import jooq.Public;
import jooq.tables.Account.AccountPath;
import jooq.tables.records.AdministratorRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Administrator extends TableImpl<AdministratorRecord> {

    private static final long serialVersionUID = -1596894823;

    /**
     * The reference instance of <code>public.administrator</code>
     */
    public static final Administrator ADMINISTRATOR = new Administrator();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<AdministratorRecord> getRecordType() {
        return AdministratorRecord.class;
    }

    /**
     * The column <code>public.administrator.id_account</code>.
     */
    public final TableField<AdministratorRecord, Long> ID_ACCOUNT = createField(DSL.name("id_account"), SQLDataType.BIGINT.nullable(false), this, "");

    private Administrator(Name alias, Table<AdministratorRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Administrator(Name alias, Table<AdministratorRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.administrator</code> table reference
     */
    public Administrator(String alias) {
        this(DSL.name(alias), ADMINISTRATOR);
    }

    /**
     * Create an aliased <code>public.administrator</code> table reference
     */
    public Administrator(Name alias) {
        this(alias, ADMINISTRATOR);
    }

    /**
     * Create a <code>public.administrator</code> table reference
     */
    public Administrator() {
        this(DSL.name("administrator"), null);
    }

    public <O extends Record> Administrator(Table<O> path, ForeignKey<O, AdministratorRecord> childPath, InverseForeignKey<O, AdministratorRecord> parentPath) {
        super(path, childPath, parentPath, ADMINISTRATOR);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AdministratorPath extends Administrator implements Path<AdministratorRecord> {

        private static final long serialVersionUID = -1596894823;
        public <O extends Record> AdministratorPath(Table<O> path, ForeignKey<O, AdministratorRecord> childPath, InverseForeignKey<O, AdministratorRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AdministratorPath(Name alias, Table<AdministratorRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AdministratorPath as(String alias) {
            return new AdministratorPath(DSL.name(alias), this);
        }

        @Override
        public AdministratorPath as(Name alias) {
            return new AdministratorPath(alias, this);
        }

        @Override
        public AdministratorPath as(Table<?> alias) {
            return new AdministratorPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<AdministratorRecord> getPrimaryKey() {
        return Keys.PK_ADMINISTRATOR;
    }

    @Override
    @Nonnull
    public List<ForeignKey<AdministratorRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ADMINISTRATOR__FK_ADMINISTRATOR_TO_ACCOUNT);
    }

    private transient AccountPath _account;

    /**
     * Get the implicit join path to the <code>public.account</code> table.
     */
    public AccountPath account() {
        if (_account == null)
            _account = new AccountPath(this, Keys.ADMINISTRATOR__FK_ADMINISTRATOR_TO_ACCOUNT, null);

        return _account;
    }

    @Override
    @Nonnull
    public Administrator as(String alias) {
        return new Administrator(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public Administrator as(Name alias) {
        return new Administrator(alias, this);
    }

    @Override
    @Nonnull
    public Administrator as(Table<?> alias) {
        return new Administrator(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Administrator rename(String name) {
        return new Administrator(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Administrator rename(Name name) {
        return new Administrator(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Administrator rename(Table<?> name) {
        return new Administrator(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Administrator where(Condition condition) {
        return new Administrator(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Administrator where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Administrator where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Administrator where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public Administrator where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public Administrator where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public Administrator where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public Administrator where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Administrator whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Administrator whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
