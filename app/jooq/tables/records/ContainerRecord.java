/*
 * This file is generated by jOOQ.
 */
package jooq.tables.records;


import jakarta.persistence.*;
import jooq.tables.Container;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;
import java.beans.ConstructorProperties;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "container",
    schema = "public"
)
public class ContainerRecord extends UpdatableRecordImpl<ContainerRecord> {

    private static final long serialVersionUID = -875044995;

    /**
     * Setter for <code>public.container.id</code>.
     */
    public ContainerRecord setId(@Nullable Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.container.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    @Nullable
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.container.id_container_type</code>.
     */
    public ContainerRecord setIdContainerType(@Nullable Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.container.id_container_type</code>.
     */
    @Column(name = "id_container_type")
    @Nullable
    public Long getIdContainerType() {
        return (Long) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ContainerRecord
     */
    public ContainerRecord() {
        super(Container.CONTAINER);
    }

    /**
     * Create a detached, initialised ContainerRecord
     */
    @ConstructorProperties({ "id", "idContainerType" })
    public ContainerRecord(@Nullable Long id, @Nullable Long idContainerType) {
        super(Container.CONTAINER);

        setId(id);
        setIdContainerType(idContainerType);
        resetChangedOnNotNull();
    }
}
