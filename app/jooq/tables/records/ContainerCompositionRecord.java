/*
 * This file is generated by jOOQ.
 */
package jooq.tables.records;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;
import jakarta.validation.constraints.NotNull;
import jooq.tables.ContainerComposition;
import org.jooq.Record2;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;
import java.beans.ConstructorProperties;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "container_composition",
    schema = "public",
    uniqueConstraints = {
        @UniqueConstraint(name = "unique_container_composition_on_locker", columnNames = { "id_locker" })
    }
)
public class ContainerCompositionRecord extends UpdatableRecordImpl<ContainerCompositionRecord> {

    private static final long serialVersionUID = 707648231;

    /**
     * Setter for <code>public.container_composition.id_container</code>.
     */
    public ContainerCompositionRecord setIdContainer(@Nonnull Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.container_composition.id_container</code>.
     */
    @Column(name = "id_container", nullable = false)
    @NotNull
    @Nonnull
    public Long getIdContainer() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.container_composition.id_locker</code>.
     */
    public ContainerCompositionRecord setIdLocker(@Nonnull Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.container_composition.id_locker</code>.
     */
    @Column(name = "id_locker", nullable = false)
    @NotNull
    @Nonnull
    public Long getIdLocker() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.container_composition.position</code>.
     */
    public ContainerCompositionRecord setPosition(@Nullable Short value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.container_composition.position</code>.
     */
    @Column(name = "position")
    @Nullable
    public Short getPosition() {
        return (Short) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Record2<Long, Long> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ContainerCompositionRecord
     */
    public ContainerCompositionRecord() {
        super(ContainerComposition.CONTAINER_COMPOSITION);
    }

    /**
     * Create a detached, initialised ContainerCompositionRecord
     */
    @ConstructorProperties({ "idContainer", "idLocker", "position" })
    public ContainerCompositionRecord(@Nonnull Long idContainer, @Nonnull Long idLocker, @Nullable Short position) {
        super(ContainerComposition.CONTAINER_COMPOSITION);

        setIdContainer(idContainer);
        setIdLocker(idLocker);
        setPosition(position);
        resetChangedOnNotNull();
    }
}
