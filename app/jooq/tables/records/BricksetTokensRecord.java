/*
 * This file is generated by jOOQ.
 */
package jooq.tables.records;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import jooq.tables.BricksetTokens;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;
import java.beans.ConstructorProperties;
import java.time.LocalDate;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "brickset_tokens",
    schema = "public"
)
public class BricksetTokensRecord extends UpdatableRecordImpl<BricksetTokensRecord> {

    private static final long serialVersionUID = 893525594;

    /**
     * Setter for <code>public.brickset_tokens.id_account</code>.
     */
    public BricksetTokensRecord setIdAccount(@Nonnull Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.brickset_tokens.id_account</code>.
     */
    @Id
    @Column(name = "id_account", nullable = false)
    @NotNull
    @Nonnull
    public Long getIdAccount() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.brickset_tokens.api_key</code>.
     */
    public BricksetTokensRecord setApiKey(@Nonnull String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.brickset_tokens.api_key</code>.
     */
    @Column(name = "api_key", nullable = false, length = 64)
    @NotNull
    @Size(max = 64)
    @Nonnull
    public String getApiKey() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.brickset_tokens.username</code>.
     */
    public BricksetTokensRecord setUsername(@Nonnull String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.brickset_tokens.username</code>.
     */
    @Column(name = "username", nullable = false, length = 1024)
    @NotNull
    @Size(max = 1024)
    @Nonnull
    public String getUsername() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.brickset_tokens.password</code>.
     */
    public BricksetTokensRecord setPassword(@Nonnull String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.brickset_tokens.password</code>.
     */
    @Column(name = "password", nullable = false, length = 1024)
    @NotNull
    @Size(max = 1024)
    @Nonnull
    public String getPassword() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.brickset_tokens.valid_until</code>.
     */
    public BricksetTokensRecord setValidUntil(@Nullable LocalDate value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.brickset_tokens.valid_until</code>.
     */
    @Column(name = "valid_until")
    @Nullable
    public LocalDate getValidUntil() {
        return (LocalDate) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BricksetTokensRecord
     */
    public BricksetTokensRecord() {
        super(BricksetTokens.BRICKSET_TOKENS);
    }

    /**
     * Create a detached, initialised BricksetTokensRecord
     */
    @ConstructorProperties({ "idAccount", "apiKey", "username", "password", "validUntil" })
    public BricksetTokensRecord(@Nonnull Long idAccount, @Nonnull String apiKey, @Nonnull String username, @Nonnull String password, @Nullable LocalDate validUntil) {
        super(BricksetTokens.BRICKSET_TOKENS);

        setIdAccount(idAccount);
        setApiKey(apiKey);
        setUsername(username);
        setPassword(password);
        setValidUntil(validUntil);
        resetChangedOnNotNull();
    }
}
