/*
 * This file is generated by jOOQ.
 */
package jooq.tables.records;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import jooq.tables.ContainerType;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;
import java.beans.ConstructorProperties;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(
    name = "container_type",
    schema = "public"
)
public class ContainerTypeRecord extends UpdatableRecordImpl<ContainerTypeRecord> implements Record5<Long, String, Short, Short, String> {

    private static final long serialVersionUID = 173674458;

    /**
     * Setter for <code>public.container_type.id</code>.
     */
    public ContainerTypeRecord setId(@Nonnull Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.container_type.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false, precision = 64)
    @Nonnull
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.container_type.name</code>.
     */
    public ContainerTypeRecord setName(@Nonnull String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.container_type.name</code>.
     */
    @Column(name = "name", nullable = false, length = 1024)
    @NotNull
    @Size(max = 1024)
    @Nonnull
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.container_type.min_lockers</code>.
     */
    public ContainerTypeRecord setMinLockers(@Nonnull Short value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.container_type.min_lockers</code>.
     */
    @Column(name = "min_lockers", nullable = false, precision = 16)
    @NotNull
    @Nonnull
    public Short getMinLockers() {
        return (Short) get(2);
    }

    /**
     * Setter for <code>public.container_type.max_lockers</code>.
     */
    public ContainerTypeRecord setMaxLockers(@Nonnull Short value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.container_type.max_lockers</code>.
     */
    @Column(name = "max_lockers", nullable = false, precision = 16)
    @NotNull
    @Nonnull
    public Short getMaxLockers() {
        return (Short) get(3);
    }

    /**
     * Setter for <code>public.container_type.number_formatting</code>.
     */
    public ContainerTypeRecord setNumberFormatting(@Nonnull String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.container_type.number_formatting</code>.
     */
    @Column(name = "number_formatting", nullable = false, length = 256)
    @Size(max = 256)
    @Nonnull
    public String getNumberFormatting() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row5<Long, String, Short, Short, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    @Nonnull
    public Row5<Long, String, Short, Short, String> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    @Nonnull
    public Field<Long> field1() {
        return ContainerType.CONTAINER_TYPE.ID;
    }

    @Override
    @Nonnull
    public Field<String> field2() {
        return ContainerType.CONTAINER_TYPE.NAME;
    }

    @Override
    @Nonnull
    public Field<Short> field3() {
        return ContainerType.CONTAINER_TYPE.MIN_LOCKERS;
    }

    @Override
    @Nonnull
    public Field<Short> field4() {
        return ContainerType.CONTAINER_TYPE.MAX_LOCKERS;
    }

    @Override
    @Nonnull
    public Field<String> field5() {
        return ContainerType.CONTAINER_TYPE.NUMBER_FORMATTING;
    }

    @Override
    @Nonnull
    public Long component1() {
        return getId();
    }

    @Override
    @Nonnull
    public String component2() {
        return getName();
    }

    @Override
    @Nonnull
    public Short component3() {
        return getMinLockers();
    }

    @Override
    @Nonnull
    public Short component4() {
        return getMaxLockers();
    }

    @Override
    @Nonnull
    public String component5() {
        return getNumberFormatting();
    }

    @Override
    @Nonnull
    public Long value1() {
        return getId();
    }

    @Override
    @Nonnull
    public String value2() {
        return getName();
    }

    @Override
    @Nonnull
    public Short value3() {
        return getMinLockers();
    }

    @Override
    @Nonnull
    public Short value4() {
        return getMaxLockers();
    }

    @Override
    @Nonnull
    public String value5() {
        return getNumberFormatting();
    }

    @Override
    @Nonnull
    public ContainerTypeRecord value1(@Nonnull Long value) {
        setId(value);
        return this;
    }

    @Override
    @Nonnull
    public ContainerTypeRecord value2(@Nonnull String value) {
        setName(value);
        return this;
    }

    @Override
    @Nonnull
    public ContainerTypeRecord value3(@Nonnull Short value) {
        setMinLockers(value);
        return this;
    }

    @Override
    @Nonnull
    public ContainerTypeRecord value4(@Nonnull Short value) {
        setMaxLockers(value);
        return this;
    }

    @Override
    @Nonnull
    public ContainerTypeRecord value5(@Nonnull String value) {
        setNumberFormatting(value);
        return this;
    }

    @Override
    @Nonnull
    public ContainerTypeRecord values(@Nonnull Long value1, @Nonnull String value2, @Nonnull Short value3, @Nonnull Short value4, @Nonnull String value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ContainerTypeRecord
     */
    public ContainerTypeRecord() {
        super(ContainerType.CONTAINER_TYPE);
    }

    /**
     * Create a detached, initialised ContainerTypeRecord
     */
    @ConstructorProperties({ "id", "name", "minLockers", "maxLockers", "numberFormatting" })
    public ContainerTypeRecord(@Nonnull Long id, @Nonnull String name, @Nonnull Short minLockers, @Nonnull Short maxLockers, @Nonnull String numberFormatting) {
        super(ContainerType.CONTAINER_TYPE);

        setId(id);
        setName(name);
        setMinLockers(minLockers);
        setMaxLockers(maxLockers);
        setNumberFormatting(numberFormatting);
    }
}
