/*
 * This file is generated by jOOQ.
 */
package jooq.tables.records;


import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import jooq.tables.Account;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;
import java.beans.ConstructorProperties;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "account",
    schema = "public",
    uniqueConstraints = {
        @UniqueConstraint(name = "unique_account_email", columnNames = { "email" })
    }
)
public class AccountRecord extends UpdatableRecordImpl<AccountRecord> {

    private static final long serialVersionUID = -2090846151;

    /**
     * Setter for <code>public.account.id</code>.
     */
    public AccountRecord setId(@Nullable Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.account.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    @Nullable
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.account.id_color_source</code>.
     */
    public AccountRecord setIdColorSource(@Nullable Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.account.id_color_source</code>.
     */
    @Column(name = "id_color_source")
    @Nullable
    public Long getIdColorSource() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.account.firstname</code>.
     */
    public AccountRecord setFirstname(@Nonnull String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.account.firstname</code>.
     */
    @Column(name = "firstname", nullable = false, length = 1024)
    @NotNull
    @Size(max = 1024)
    @Nonnull
    public String getFirstname() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.account.lastname</code>.
     */
    public AccountRecord setLastname(@Nonnull String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.account.lastname</code>.
     */
    @Column(name = "lastname", nullable = false, length = 1024)
    @NotNull
    @Size(max = 1024)
    @Nonnull
    public String getLastname() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.account.email</code>.
     */
    public AccountRecord setEmail(@Nonnull String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.account.email</code>.
     */
    @Column(name = "email", nullable = false, length = 1024)
    @NotNull
    @Size(max = 1024)
    @Nonnull
    public String getEmail() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.account.password</code>.
     */
    public AccountRecord setPassword(@Nonnull String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.account.password</code>.
     */
    @Column(name = "password", nullable = false, length = 1024)
    @NotNull
    @Size(max = 1024)
    @Nonnull
    public String getPassword() {
        return (String) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountRecord
     */
    public AccountRecord() {
        super(Account.ACCOUNT);
    }

    /**
     * Create a detached, initialised AccountRecord
     */
    @ConstructorProperties({ "id", "idColorSource", "firstname", "lastname", "email", "password" })
    public AccountRecord(@Nullable Long id, @Nullable Long idColorSource, @Nonnull String firstname, @Nonnull String lastname, @Nonnull String email, @Nonnull String password) {
        super(Account.ACCOUNT);

        setId(id);
        setIdColorSource(idColorSource);
        setFirstname(firstname);
        setLastname(lastname);
        setEmail(email);
        setPassword(password);
        resetChangedOnNotNull();
    }
}
