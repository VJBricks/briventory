/*
 * This file is generated by jOOQ.
 */
package jooq.tables.records;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import jooq.tables.Account;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(
    name = "account",
    schema = "public",
    uniqueConstraints = {
        @UniqueConstraint(name = "unique_account_email", columnNames = { "email" })
    }
)
public class AccountRecord extends UpdatableRecordImpl<AccountRecord> implements Record6<Long, Long, String, String, String, String> {

    private static final long serialVersionUID = -1806319377;

    /**
     * Setter for <code>public.account.id</code>.
     */
    public AccountRecord setId(@Nonnull Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.account.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false, precision = 64)
    @Nonnull
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.account.id_color_source</code>.
     */
    public AccountRecord setIdColorSource(@Nullable Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.account.id_color_source</code>.
     */
    @Column(name = "id_color_source", precision = 64)
    @Nullable
    public Long getIdColorSource() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.account.firstname</code>.
     */
    public AccountRecord setFirstname(@Nonnull String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.account.firstname</code>.
     */
    @Column(name = "firstname", nullable = false, length = 1024)
    @NotNull
    @Size(max = 1024)
    @Nonnull
    public String getFirstname() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.account.lastname</code>.
     */
    public AccountRecord setLastname(@Nonnull String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.account.lastname</code>.
     */
    @Column(name = "lastname", nullable = false, length = 1024)
    @NotNull
    @Size(max = 1024)
    @Nonnull
    public String getLastname() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.account.email</code>.
     */
    public AccountRecord setEmail(@Nonnull String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.account.email</code>.
     */
    @Column(name = "email", nullable = false, length = 1024)
    @NotNull
    @Size(max = 1024)
    @Nonnull
    public String getEmail() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.account.password</code>.
     */
    public AccountRecord setPassword(@Nonnull String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.account.password</code>.
     */
    @Column(name = "password", nullable = false, length = 1024)
    @NotNull
    @Size(max = 1024)
    @Nonnull
    public String getPassword() {
        return (String) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row6<Long, Long, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    @Nonnull
    public Row6<Long, Long, String, String, String, String> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    @Nonnull
    public Field<Long> field1() {
        return Account.ACCOUNT.ID;
    }

    @Override
    @Nonnull
    public Field<Long> field2() {
        return Account.ACCOUNT.ID_COLOR_SOURCE;
    }

    @Override
    @Nonnull
    public Field<String> field3() {
        return Account.ACCOUNT.FIRSTNAME;
    }

    @Override
    @Nonnull
    public Field<String> field4() {
        return Account.ACCOUNT.LASTNAME;
    }

    @Override
    @Nonnull
    public Field<String> field5() {
        return Account.ACCOUNT.EMAIL;
    }

    @Override
    @Nonnull
    public Field<String> field6() {
        return Account.ACCOUNT.PASSWORD;
    }

    @Override
    @Nonnull
    public Long component1() {
        return getId();
    }

    @Override
    @Nullable
    public Long component2() {
        return getIdColorSource();
    }

    @Override
    @Nonnull
    public String component3() {
        return getFirstname();
    }

    @Override
    @Nonnull
    public String component4() {
        return getLastname();
    }

    @Override
    @Nonnull
    public String component5() {
        return getEmail();
    }

    @Override
    @Nonnull
    public String component6() {
        return getPassword();
    }

    @Override
    @Nonnull
    public Long value1() {
        return getId();
    }

    @Override
    @Nullable
    public Long value2() {
        return getIdColorSource();
    }

    @Override
    @Nonnull
    public String value3() {
        return getFirstname();
    }

    @Override
    @Nonnull
    public String value4() {
        return getLastname();
    }

    @Override
    @Nonnull
    public String value5() {
        return getEmail();
    }

    @Override
    @Nonnull
    public String value6() {
        return getPassword();
    }

    @Override
    @Nonnull
    public AccountRecord value1(@Nonnull Long value) {
        setId(value);
        return this;
    }

    @Override
    @Nonnull
    public AccountRecord value2(@Nullable Long value) {
        setIdColorSource(value);
        return this;
    }

    @Override
    @Nonnull
    public AccountRecord value3(@Nonnull String value) {
        setFirstname(value);
        return this;
    }

    @Override
    @Nonnull
    public AccountRecord value4(@Nonnull String value) {
        setLastname(value);
        return this;
    }

    @Override
    @Nonnull
    public AccountRecord value5(@Nonnull String value) {
        setEmail(value);
        return this;
    }

    @Override
    @Nonnull
    public AccountRecord value6(@Nonnull String value) {
        setPassword(value);
        return this;
    }

    @Override
    @Nonnull
    public AccountRecord values(@Nonnull Long value1, @Nullable Long value2, @Nonnull String value3, @Nonnull String value4, @Nonnull String value5, @Nonnull String value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountRecord
     */
    public AccountRecord() {
        super(Account.ACCOUNT);
    }

    /**
     * Create a detached, initialised AccountRecord
     */
    @ConstructorProperties({ "id", "idColorSource", "firstname", "lastname", "email", "password" })
    public AccountRecord(@Nonnull Long id, @Nullable Long idColorSource, @Nonnull String firstname, @Nonnull String lastname, @Nonnull String email, @Nonnull String password) {
        super(Account.ACCOUNT);

        setId(id);
        setIdColorSource(idColorSource);
        setFirstname(firstname);
        setLastname(lastname);
        setEmail(email);
        setPassword(password);
    }
}
