/*
 * This file is generated by jOOQ.
 */
package jooq.tables.records;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;

import java.beans.ConstructorProperties;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;

import jooq.tables.Constants;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(
    name = "constants",
    schema = "public"
)
public class ConstantsRecord extends TableRecordImpl<ConstantsRecord> implements Record3<Short, Short, Double> {

    private static final long serialVersionUID = 2143956057;

    /**
     * Setter for <code>public.constants.stud_to_mm_factor</code>. The factor to
     * convert a stud dimension to millimeter.
     */
    public ConstantsRecord setStudToMmFactor(@Nullable Short value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.constants.stud_to_mm_factor</code>. The factor to
     * convert a stud dimension to millimeter.
     */
    @Column(name = "stud_to_mm_factor", precision = 16)
    @Nullable
    public Short getStudToMmFactor() {
        return (Short) get(0);
    }

    /**
     * Setter for <code>public.constants.cm_to_mm_factor</code>. The factor to
     * convert a centimeter dimension to millimeter.
     */
    public ConstantsRecord setCmToMmFactor(@Nullable Short value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.constants.cm_to_mm_factor</code>. The factor to
     * convert a centimeter dimension to millimeter.
     */
    @Column(name = "cm_to_mm_factor", precision = 16)
    @Nullable
    public Short getCmToMmFactor() {
        return (Short) get(1);
    }

    /**
     * Setter for <code>public.constants.stud_height_mm</code>. The height of a
     * stud in millimeter.
     */
    public ConstantsRecord setStudHeightMm(@Nullable Double value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.constants.stud_height_mm</code>. The height of a
     * stud in millimeter.
     */
    @Column(name = "stud_height_mm", precision = 53)
    @Nullable
    public Double getStudHeightMm() {
        return (Double) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row3<Short, Short, Double> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    @Nonnull
    public Row3<Short, Short, Double> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    @Nonnull
    public Field<Short> field1() {
        return Constants.CONSTANTS.STUD_TO_MM_FACTOR;
    }

    @Override
    @Nonnull
    public Field<Short> field2() {
        return Constants.CONSTANTS.CM_TO_MM_FACTOR;
    }

    @Override
    @Nonnull
    public Field<Double> field3() {
        return Constants.CONSTANTS.STUD_HEIGHT_MM;
    }

    @Override
    @Nullable
    public Short component1() {
        return getStudToMmFactor();
    }

    @Override
    @Nullable
    public Short component2() {
        return getCmToMmFactor();
    }

    @Override
    @Nullable
    public Double component3() {
        return getStudHeightMm();
    }

    @Override
    @Nullable
    public Short value1() {
        return getStudToMmFactor();
    }

    @Override
    @Nullable
    public Short value2() {
        return getCmToMmFactor();
    }

    @Override
    @Nullable
    public Double value3() {
        return getStudHeightMm();
    }

    @Override
    @Nonnull
    public ConstantsRecord value1(@Nullable Short value) {
        setStudToMmFactor(value);
        return this;
    }

    @Override
    @Nonnull
    public ConstantsRecord value2(@Nullable Short value) {
        setCmToMmFactor(value);
        return this;
    }

    @Override
    @Nonnull
    public ConstantsRecord value3(@Nullable Double value) {
        setStudHeightMm(value);
        return this;
    }

    @Override
    @Nonnull
    public ConstantsRecord values(@Nullable Short value1, @Nullable Short value2, @Nullable Double value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ConstantsRecord
     */
    public ConstantsRecord() {
        super(Constants.CONSTANTS);
    }

    /**
     * Create a detached, initialised ConstantsRecord
     */
    @ConstructorProperties({ "studToMmFactor", "cmToMmFactor", "studHeightMm" })
    public ConstantsRecord(@Nullable Short studToMmFactor, @Nullable Short cmToMmFactor, @Nullable Double studHeightMm) {
        super(Constants.CONSTANTS);

        setStudToMmFactor(studToMmFactor);
        setCmToMmFactor(cmToMmFactor);
        setStudHeightMm(studHeightMm);
    }
}
