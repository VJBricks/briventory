/*
 * This file is generated by jOOQ.
 */
package jooq.tables.records;


import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import jooq.tables.Rgba;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;
import java.beans.ConstructorProperties;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "rgba",
    schema = "public",
    uniqueConstraints = {
        @UniqueConstraint(name = "unique_rgba_on_components", columnNames = { "red", "green", "blue", "alpha" })
    }
)
public class RgbaRecord extends UpdatableRecordImpl<RgbaRecord> {

    private static final long serialVersionUID = -1029164797;

    /**
     * Setter for <code>public.rgba.id</code>.
     */
    public RgbaRecord setId(@Nullable Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.rgba.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    @Nullable
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.rgba.red</code>.
     */
    public RgbaRecord setRed(@Nonnull Short value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.rgba.red</code>.
     */
    @Column(name = "red", nullable = false)
    @NotNull
    @Nonnull
    public Short getRed() {
        return (Short) get(1);
    }

    /**
     * Setter for <code>public.rgba.green</code>.
     */
    public RgbaRecord setGreen(@Nonnull Short value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.rgba.green</code>.
     */
    @Column(name = "green", nullable = false)
    @NotNull
    @Nonnull
    public Short getGreen() {
        return (Short) get(2);
    }

    /**
     * Setter for <code>public.rgba.blue</code>.
     */
    public RgbaRecord setBlue(@Nonnull Short value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.rgba.blue</code>.
     */
    @Column(name = "blue", nullable = false)
    @NotNull
    @Nonnull
    public Short getBlue() {
        return (Short) get(3);
    }

    /**
     * Setter for <code>public.rgba.alpha</code>.
     */
    public RgbaRecord setAlpha(@Nonnull Float value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.rgba.alpha</code>.
     */
    @Column(name = "alpha", nullable = false)
    @NotNull
    @Nonnull
    public Float getAlpha() {
        return (Float) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RgbaRecord
     */
    public RgbaRecord() {
        super(Rgba.RGBA);
    }

    /**
     * Create a detached, initialised RgbaRecord
     */
    @ConstructorProperties({ "id", "red", "green", "blue", "alpha" })
    public RgbaRecord(@Nullable Long id, @Nonnull Short red, @Nonnull Short green, @Nonnull Short blue, @Nonnull Float alpha) {
        super(Rgba.RGBA);

        setId(id);
        setRed(red);
        setGreen(green);
        setBlue(blue);
        setAlpha(alpha);
        resetChangedOnNotNull();
    }
}
