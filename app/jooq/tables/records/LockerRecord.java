/*
 * This file is generated by jOOQ.
 */
package jooq.tables.records;


import jakarta.persistence.*;
import jooq.tables.Locker;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;
import java.beans.ConstructorProperties;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "locker",
    schema = "public"
)
public class LockerRecord extends UpdatableRecordImpl<LockerRecord> {

    private static final long serialVersionUID = -1150401249;

    /**
     * Setter for <code>public.locker.id</code>.
     */
    public LockerRecord setId(@Nullable Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.locker.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    @Nullable
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.locker.id_locker_size</code>.
     */
    public LockerRecord setIdLockerSize(@Nullable Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.locker.id_locker_size</code>.
     */
    @Column(name = "id_locker_size")
    @Nullable
    public Long getIdLockerSize() {
        return (Long) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LockerRecord
     */
    public LockerRecord() {
        super(Locker.LOCKER);
    }

    /**
     * Create a detached, initialised LockerRecord
     */
    @ConstructorProperties({ "id", "idLockerSize" })
    public LockerRecord(@Nullable Long id, @Nullable Long idLockerSize) {
        super(Locker.LOCKER);

        setId(id);
        setIdLockerSize(idLockerSize);
        resetChangedOnNotNull();
    }
}
