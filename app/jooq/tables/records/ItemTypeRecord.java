/*
 * This file is generated by jOOQ.
 */
package jooq.tables.records;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import jooq.tables.ItemType;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * item_type is considered as a table of constants, there is not sequence.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(
    name = "item_type",
    schema = "public",
    uniqueConstraints = {
        @UniqueConstraint(name = "unique_item_type_on_code", columnNames = { "code" })
    }
)
public class ItemTypeRecord extends UpdatableRecordImpl<ItemTypeRecord> implements Record4<Long, String, String, Boolean> {

    private static final long serialVersionUID = 737959465;

    /**
     * Setter for <code>public.item_type.id</code>.
     */
    public ItemTypeRecord setId(@Nonnull Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.item_type.id</code>.
     */
    @Id
    @Column(name = "id", nullable = false, precision = 64)
    @NotNull
    @Nonnull
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.item_type.name</code>.
     */
    public ItemTypeRecord setName(@Nonnull String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.item_type.name</code>.
     */
    @Column(name = "name", nullable = false, length = 1024)
    @NotNull
    @Size(max = 1024)
    @Nonnull
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.item_type.code</code>.
     */
    public ItemTypeRecord setCode(@Nonnull String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.item_type.code</code>.
     */
    @Column(name = "code", nullable = false, length = 1)
    @NotNull
    @Size(max = 1)
    @Nonnull
    public String getCode() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.item_type.dimension_in_stud</code>.
     */
    public ItemTypeRecord setDimensionInStud(@Nonnull Boolean value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.item_type.dimension_in_stud</code>.
     */
    @Column(name = "dimension_in_stud", nullable = false)
    @Nonnull
    public Boolean getDimensionInStud() {
        return (Boolean) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row4<Long, String, String, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    @Nonnull
    public Row4<Long, String, String, Boolean> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    @Nonnull
    public Field<Long> field1() {
        return ItemType.ITEM_TYPE.ID;
    }

    @Override
    @Nonnull
    public Field<String> field2() {
        return ItemType.ITEM_TYPE.NAME;
    }

    @Override
    @Nonnull
    public Field<String> field3() {
        return ItemType.ITEM_TYPE.CODE;
    }

    @Override
    @Nonnull
    public Field<Boolean> field4() {
        return ItemType.ITEM_TYPE.DIMENSION_IN_STUD;
    }

    @Override
    @Nonnull
    public Long component1() {
        return getId();
    }

    @Override
    @Nonnull
    public String component2() {
        return getName();
    }

    @Override
    @Nonnull
    public String component3() {
        return getCode();
    }

    @Override
    @Nonnull
    public Boolean component4() {
        return getDimensionInStud();
    }

    @Override
    @Nonnull
    public Long value1() {
        return getId();
    }

    @Override
    @Nonnull
    public String value2() {
        return getName();
    }

    @Override
    @Nonnull
    public String value3() {
        return getCode();
    }

    @Override
    @Nonnull
    public Boolean value4() {
        return getDimensionInStud();
    }

    @Override
    @Nonnull
    public ItemTypeRecord value1(@Nonnull Long value) {
        setId(value);
        return this;
    }

    @Override
    @Nonnull
    public ItemTypeRecord value2(@Nonnull String value) {
        setName(value);
        return this;
    }

    @Override
    @Nonnull
    public ItemTypeRecord value3(@Nonnull String value) {
        setCode(value);
        return this;
    }

    @Override
    @Nonnull
    public ItemTypeRecord value4(@Nonnull Boolean value) {
        setDimensionInStud(value);
        return this;
    }

    @Override
    @Nonnull
    public ItemTypeRecord values(@Nonnull Long value1, @Nonnull String value2, @Nonnull String value3, @Nonnull Boolean value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ItemTypeRecord
     */
    public ItemTypeRecord() {
        super(ItemType.ITEM_TYPE);
    }

    /**
     * Create a detached, initialised ItemTypeRecord
     */
    @ConstructorProperties({ "id", "name", "code", "dimensionInStud" })
    public ItemTypeRecord(@Nonnull Long id, @Nonnull String name, @Nonnull String code, @Nonnull Boolean dimensionInStud) {
        super(ItemType.ITEM_TYPE);

        setId(id);
        setName(name);
        setCode(code);
        setDimensionInStud(dimensionInStud);
    }
}
