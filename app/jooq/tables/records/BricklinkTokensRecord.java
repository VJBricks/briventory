/*
 * This file is generated by jOOQ.
 */
package jooq.tables.records;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import jooq.tables.BricklinkTokens;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;
import java.beans.ConstructorProperties;
import java.time.LocalDate;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "bricklink_tokens",
    schema = "public"
)
public class BricklinkTokensRecord extends UpdatableRecordImpl<BricklinkTokensRecord> {

    private static final long serialVersionUID = 44675567;

    /**
     * Setter for <code>public.bricklink_tokens.id_account</code>.
     */
    public BricklinkTokensRecord setIdAccount(@Nonnull Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.bricklink_tokens.id_account</code>.
     */
    @Id
    @Column(name = "id_account", nullable = false)
    @NotNull
    @Nonnull
    public Long getIdAccount() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.bricklink_tokens.consumer_key</code>.
     */
    public BricklinkTokensRecord setConsumerKey(@Nonnull String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.bricklink_tokens.consumer_key</code>.
     */
    @Column(name = "consumer_key", nullable = false, length = 64)
    @NotNull
    @Size(max = 64)
    @Nonnull
    public String getConsumerKey() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.bricklink_tokens.consumer_secret</code>.
     */
    public BricklinkTokensRecord setConsumerSecret(@Nonnull String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.bricklink_tokens.consumer_secret</code>.
     */
    @Column(name = "consumer_secret", nullable = false, length = 64)
    @NotNull
    @Size(max = 64)
    @Nonnull
    public String getConsumerSecret() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.bricklink_tokens.token_value</code>.
     */
    public BricklinkTokensRecord setTokenValue(@Nonnull String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.bricklink_tokens.token_value</code>.
     */
    @Column(name = "token_value", nullable = false, length = 64)
    @NotNull
    @Size(max = 64)
    @Nonnull
    public String getTokenValue() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.bricklink_tokens.token_secret</code>.
     */
    public BricklinkTokensRecord setTokenSecret(@Nonnull String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.bricklink_tokens.token_secret</code>.
     */
    @Column(name = "token_secret", nullable = false, length = 64)
    @NotNull
    @Size(max = 64)
    @Nonnull
    public String getTokenSecret() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.bricklink_tokens.valid_until</code>.
     */
    public BricklinkTokensRecord setValidUntil(@Nullable LocalDate value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.bricklink_tokens.valid_until</code>.
     */
    @Column(name = "valid_until")
    @Nullable
    public LocalDate getValidUntil() {
        return (LocalDate) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BricklinkTokensRecord
     */
    public BricklinkTokensRecord() {
        super(BricklinkTokens.BRICKLINK_TOKENS);
    }

    /**
     * Create a detached, initialised BricklinkTokensRecord
     */
    @ConstructorProperties({ "idAccount", "consumerKey", "consumerSecret", "tokenValue", "tokenSecret", "validUntil" })
    public BricklinkTokensRecord(@Nonnull Long idAccount, @Nonnull String consumerKey, @Nonnull String consumerSecret, @Nonnull String tokenValue, @Nonnull String tokenSecret, @Nullable LocalDate validUntil) {
        super(BricklinkTokens.BRICKLINK_TOKENS);

        setIdAccount(idAccount);
        setConsumerKey(consumerKey);
        setConsumerSecret(consumerSecret);
        setTokenValue(tokenValue);
        setTokenSecret(tokenSecret);
        setValidUntil(validUntil);
        resetChangedOnNotNull();
    }
}
