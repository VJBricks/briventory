/*
 * This file is generated by jOOQ.
 */
package jooq.tables.records;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import jooq.tables.LockerSize;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(
    name = "locker_size",
    schema = "public",
    uniqueConstraints = {
        @UniqueConstraint(name = "unique_dimension_on_dimensions", columnNames = { "length", "width", "height" })
    }
)
public class LockerSizeRecord extends UpdatableRecordImpl<LockerSizeRecord> implements Record5<Long, String, Double, Double, Double> {

    private static final long serialVersionUID = -1406814510;

    /**
     * Setter for <code>public.locker_size.id</code>.
     */
    public LockerSizeRecord setId(@Nonnull Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.locker_size.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false, precision = 64)
    @Nonnull
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.locker_size.name</code>.
     */
    public LockerSizeRecord setName(@Nonnull String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.locker_size.name</code>.
     */
    @Column(name = "name", nullable = false, length = 1024)
    @NotNull
    @Size(max = 1024)
    @Nonnull
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.locker_size.length</code>.
     */
    public LockerSizeRecord setLength(@Nonnull Double value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.locker_size.length</code>.
     */
    @Column(name = "length", nullable = false, precision = 53)
    @NotNull
    @Nonnull
    public Double getLength() {
        return (Double) get(2);
    }

    /**
     * Setter for <code>public.locker_size.width</code>.
     */
    public LockerSizeRecord setWidth(@Nonnull Double value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.locker_size.width</code>.
     */
    @Column(name = "width", nullable = false, precision = 53)
    @NotNull
    @Nonnull
    public Double getWidth() {
        return (Double) get(3);
    }

    /**
     * Setter for <code>public.locker_size.height</code>.
     */
    public LockerSizeRecord setHeight(@Nonnull Double value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.locker_size.height</code>.
     */
    @Column(name = "height", nullable = false, precision = 53)
    @NotNull
    @Nonnull
    public Double getHeight() {
        return (Double) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row5<Long, String, Double, Double, Double> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    @Nonnull
    public Row5<Long, String, Double, Double, Double> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    @Nonnull
    public Field<Long> field1() {
        return LockerSize.LOCKER_SIZE.ID;
    }

    @Override
    @Nonnull
    public Field<String> field2() {
        return LockerSize.LOCKER_SIZE.NAME;
    }

    @Override
    @Nonnull
    public Field<Double> field3() {
        return LockerSize.LOCKER_SIZE.LENGTH;
    }

    @Override
    @Nonnull
    public Field<Double> field4() {
        return LockerSize.LOCKER_SIZE.WIDTH;
    }

    @Override
    @Nonnull
    public Field<Double> field5() {
        return LockerSize.LOCKER_SIZE.HEIGHT;
    }

    @Override
    @Nonnull
    public Long component1() {
        return getId();
    }

    @Override
    @Nonnull
    public String component2() {
        return getName();
    }

    @Override
    @Nonnull
    public Double component3() {
        return getLength();
    }

    @Override
    @Nonnull
    public Double component4() {
        return getWidth();
    }

    @Override
    @Nonnull
    public Double component5() {
        return getHeight();
    }

    @Override
    @Nonnull
    public Long value1() {
        return getId();
    }

    @Override
    @Nonnull
    public String value2() {
        return getName();
    }

    @Override
    @Nonnull
    public Double value3() {
        return getLength();
    }

    @Override
    @Nonnull
    public Double value4() {
        return getWidth();
    }

    @Override
    @Nonnull
    public Double value5() {
        return getHeight();
    }

    @Override
    @Nonnull
    public LockerSizeRecord value1(@Nonnull Long value) {
        setId(value);
        return this;
    }

    @Override
    @Nonnull
    public LockerSizeRecord value2(@Nonnull String value) {
        setName(value);
        return this;
    }

    @Override
    @Nonnull
    public LockerSizeRecord value3(@Nonnull Double value) {
        setLength(value);
        return this;
    }

    @Override
    @Nonnull
    public LockerSizeRecord value4(@Nonnull Double value) {
        setWidth(value);
        return this;
    }

    @Override
    @Nonnull
    public LockerSizeRecord value5(@Nonnull Double value) {
        setHeight(value);
        return this;
    }

    @Override
    @Nonnull
    public LockerSizeRecord values(@Nonnull Long value1, @Nonnull String value2, @Nonnull Double value3, @Nonnull Double value4, @Nonnull Double value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LockerSizeRecord
     */
    public LockerSizeRecord() {
        super(LockerSize.LOCKER_SIZE);
    }

    /**
     * Create a detached, initialised LockerSizeRecord
     */
    @ConstructorProperties({ "id", "name", "length", "width", "height" })
    public LockerSizeRecord(@Nonnull Long id, @Nonnull String name, @Nonnull Double length, @Nonnull Double width, @Nonnull Double height) {
        super(LockerSize.LOCKER_SIZE);

        setId(id);
        setName(name);
        setLength(length);
        setWidth(width);
        setHeight(height);
    }
}
