/*
 * This file is generated by jOOQ.
 */
package jooq.tables.records;


import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import jooq.tables.LockerSize;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;
import java.beans.ConstructorProperties;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "locker_size",
    schema = "public",
    uniqueConstraints = {
        @UniqueConstraint(name = "unique_dimension_on_dimensions", columnNames = { "length", "width", "height" })
    }
)
public class LockerSizeRecord extends UpdatableRecordImpl<LockerSizeRecord> {

    private static final long serialVersionUID = -593156395;

    /**
     * Setter for <code>public.locker_size.id</code>.
     */
    public LockerSizeRecord setId(@Nullable Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.locker_size.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    @Nullable
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.locker_size.name</code>.
     */
    public LockerSizeRecord setName(@Nonnull String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.locker_size.name</code>.
     */
    @Column(name = "name", nullable = false, length = 1024)
    @NotNull
    @Size(max = 1024)
    @Nonnull
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.locker_size.length</code>.
     */
    public LockerSizeRecord setLength(@Nonnull Double value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.locker_size.length</code>.
     */
    @Column(name = "length", nullable = false)
    @NotNull
    @Nonnull
    public Double getLength() {
        return (Double) get(2);
    }

    /**
     * Setter for <code>public.locker_size.width</code>.
     */
    public LockerSizeRecord setWidth(@Nonnull Double value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.locker_size.width</code>.
     */
    @Column(name = "width", nullable = false)
    @NotNull
    @Nonnull
    public Double getWidth() {
        return (Double) get(3);
    }

    /**
     * Setter for <code>public.locker_size.height</code>.
     */
    public LockerSizeRecord setHeight(@Nonnull Double value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.locker_size.height</code>.
     */
    @Column(name = "height", nullable = false)
    @NotNull
    @Nonnull
    public Double getHeight() {
        return (Double) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LockerSizeRecord
     */
    public LockerSizeRecord() {
        super(LockerSize.LOCKER_SIZE);
    }

    /**
     * Create a detached, initialised LockerSizeRecord
     */
    @ConstructorProperties({ "id", "name", "length", "width", "height" })
    public LockerSizeRecord(@Nullable Long id, @Nonnull String name, @Nonnull Double length, @Nonnull Double width, @Nonnull Double height) {
        super(LockerSize.LOCKER_SIZE);

        setId(id);
        setName(name);
        setLength(length);
        setWidth(width);
        setHeight(height);
        resetChangedOnNotNull();
    }
}
