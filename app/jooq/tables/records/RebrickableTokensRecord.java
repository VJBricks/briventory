/*
 * This file is generated by jOOQ.
 */
package jooq.tables.records;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import jooq.tables.RebrickableTokens;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;
import java.beans.ConstructorProperties;
import java.time.LocalDate;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "rebrickable_tokens",
    schema = "public"
)
public class RebrickableTokensRecord extends UpdatableRecordImpl<RebrickableTokensRecord> {

    private static final long serialVersionUID = -1573666707;

    /**
     * Setter for <code>public.rebrickable_tokens.id_account</code>.
     */
    public RebrickableTokensRecord setIdAccount(@Nonnull Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.rebrickable_tokens.id_account</code>.
     */
    @Id
    @Column(name = "id_account", nullable = false)
    @NotNull
    @Nonnull
    public Long getIdAccount() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.rebrickable_tokens.key</code>.
     */
    public RebrickableTokensRecord setKey(@Nonnull String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.rebrickable_tokens.key</code>.
     */
    @Column(name = "key", nullable = false, length = 64)
    @NotNull
    @Size(max = 64)
    @Nonnull
    public String getKey() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.rebrickable_tokens.valid_until</code>.
     */
    public RebrickableTokensRecord setValidUntil(@Nullable LocalDate value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.rebrickable_tokens.valid_until</code>.
     */
    @Column(name = "valid_until")
    @Nullable
    public LocalDate getValidUntil() {
        return (LocalDate) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RebrickableTokensRecord
     */
    public RebrickableTokensRecord() {
        super(RebrickableTokens.REBRICKABLE_TOKENS);
    }

    /**
     * Create a detached, initialised RebrickableTokensRecord
     */
    @ConstructorProperties({ "idAccount", "key", "validUntil" })
    public RebrickableTokensRecord(@Nonnull Long idAccount, @Nonnull String key, @Nullable LocalDate validUntil) {
        super(RebrickableTokens.REBRICKABLE_TOKENS);

        setIdAccount(idAccount);
        setKey(key);
        setValidUntil(validUntil);
        resetChangedOnNotNull();
    }
}
