/*
 * This file is generated by jOOQ.
 */
package jooq.tables.records;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import jooq.tables.Configuration;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Row1;
import org.jooq.impl.TableRecordImpl;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;
import java.beans.ConstructorProperties;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(
    name = "configuration",
    schema = "public"
)
public class ConfigurationRecord extends TableRecordImpl<ConfigurationRecord> implements Record1<String> {

    private static final long serialVersionUID = 117622346;

    /**
     * Setter for <code>public.configuration.database_revision</code>. The
     * database revision follow the semantic versioning rules
     * (https://semver.org).
     */
    public ConfigurationRecord setDatabaseRevision(@Nonnull String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.configuration.database_revision</code>. The
     * database revision follow the semantic versioning rules
     * (https://semver.org).
     */
    @Column(name = "database_revision", nullable = false, length = 16)
    @NotNull
    @Size(max = 16)
    @Nonnull
    public String getDatabaseRevision() {
        return (String) get(0);
    }

    // -------------------------------------------------------------------------
    // Record1 type implementation
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }

    @Override
    @Nonnull
    public Row1<String> valuesRow() {
        return (Row1) super.valuesRow();
    }

    @Override
    @Nonnull
    public Field<String> field1() {
        return Configuration.CONFIGURATION.DATABASE_REVISION;
    }

    @Override
    @Nonnull
    public String component1() {
        return getDatabaseRevision();
    }

    @Override
    @Nonnull
    public String value1() {
        return getDatabaseRevision();
    }

    @Override
    @Nonnull
    public ConfigurationRecord value1(@Nonnull String value) {
        setDatabaseRevision(value);
        return this;
    }

    @Override
    @Nonnull
    public ConfigurationRecord values(@Nonnull String value1) {
        value1(value1);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ConfigurationRecord
     */
    public ConfigurationRecord() {
        super(Configuration.CONFIGURATION);
    }

    /**
     * Create a detached, initialised ConfigurationRecord
     */
    @ConstructorProperties({ "databaseRevision" })
    public ConfigurationRecord(@Nonnull String databaseRevision) {
        super(Configuration.CONFIGURATION);

        setDatabaseRevision(databaseRevision);
    }
}
