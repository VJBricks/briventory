/*
 * This file is generated by jOOQ.
 */
package jooq.tables.records;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import jooq.tables.Configuration;
import org.jooq.impl.TableRecordImpl;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;
import java.beans.ConstructorProperties;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "configuration",
    schema = "public"
)
public class ConfigurationRecord extends TableRecordImpl<ConfigurationRecord> {

    private static final long serialVersionUID = -212330591;

    /**
     * Setter for <code>public.configuration.database_revision</code>. The
     * database revision follow the semantic versioning rules
     * (https://semver.org).
     */
    public ConfigurationRecord setDatabaseRevision(@Nonnull String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.configuration.database_revision</code>. The
     * database revision follow the semantic versioning rules
     * (https://semver.org).
     */
    @Column(name = "database_revision", nullable = false, length = 16)
    @NotNull
    @Size(max = 16)
    @Nonnull
    public String getDatabaseRevision() {
        return (String) get(0);
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ConfigurationRecord
     */
    public ConfigurationRecord() {
        super(Configuration.CONFIGURATION);
    }

    /**
     * Create a detached, initialised ConfigurationRecord
     */
    @ConstructorProperties({ "databaseRevision" })
    public ConfigurationRecord(@Nonnull String databaseRevision) {
        super(Configuration.CONFIGURATION);

        setDatabaseRevision(databaseRevision);
        resetChangedOnNotNull();
    }
}
