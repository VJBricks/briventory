/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import jooq.Keys;
import jooq.Public;
import jooq.tables.ContainerType.ContainerTypePath;
import jooq.tables.ItemType.ItemTypePath;
import jooq.tables.records.AllowedItemTypesRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class AllowedItemTypes extends TableImpl<AllowedItemTypesRecord> {

    private static final long serialVersionUID = -877313751;

    /**
     * The reference instance of <code>public.allowed_item_types</code>
     */
    public static final AllowedItemTypes ALLOWED_ITEM_TYPES = new AllowedItemTypes();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<AllowedItemTypesRecord> getRecordType() {
        return AllowedItemTypesRecord.class;
    }

    /**
     * The column <code>public.allowed_item_types.id_container_type</code>.
     */
    public final TableField<AllowedItemTypesRecord, Long> ID_CONTAINER_TYPE = createField(DSL.name("id_container_type"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.allowed_item_types.id_item_type</code>.
     */
    public final TableField<AllowedItemTypesRecord, Long> ID_ITEM_TYPE = createField(DSL.name("id_item_type"), SQLDataType.BIGINT.nullable(false), this, "");

    private AllowedItemTypes(Name alias, Table<AllowedItemTypesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private AllowedItemTypes(Name alias, Table<AllowedItemTypesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.allowed_item_types</code> table reference
     */
    public AllowedItemTypes(String alias) {
        this(DSL.name(alias), ALLOWED_ITEM_TYPES);
    }

    /**
     * Create an aliased <code>public.allowed_item_types</code> table reference
     */
    public AllowedItemTypes(Name alias) {
        this(alias, ALLOWED_ITEM_TYPES);
    }

    /**
     * Create a <code>public.allowed_item_types</code> table reference
     */
    public AllowedItemTypes() {
        this(DSL.name("allowed_item_types"), null);
    }

    public <O extends Record> AllowedItemTypes(Table<O> path, ForeignKey<O, AllowedItemTypesRecord> childPath, InverseForeignKey<O, AllowedItemTypesRecord> parentPath) {
        super(path, childPath, parentPath, ALLOWED_ITEM_TYPES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AllowedItemTypesPath extends AllowedItemTypes implements Path<AllowedItemTypesRecord> {

        private static final long serialVersionUID = -877313751;
        public <O extends Record> AllowedItemTypesPath(Table<O> path, ForeignKey<O, AllowedItemTypesRecord> childPath, InverseForeignKey<O, AllowedItemTypesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AllowedItemTypesPath(Name alias, Table<AllowedItemTypesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AllowedItemTypesPath as(String alias) {
            return new AllowedItemTypesPath(DSL.name(alias), this);
        }

        @Override
        public AllowedItemTypesPath as(Name alias) {
            return new AllowedItemTypesPath(alias, this);
        }

        @Override
        public AllowedItemTypesPath as(Table<?> alias) {
            return new AllowedItemTypesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<AllowedItemTypesRecord> getPrimaryKey() {
        return Keys.PK_ALLOWED_ITEM_TYPES;
    }

    @Override
    @Nonnull
    public List<ForeignKey<AllowedItemTypesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ALLOWED_ITEM_TYPES__FK_ALLOWED_ITEM_TYPES_TO_CONTAINER_TYPE, Keys.ALLOWED_ITEM_TYPES__FK_ALLOWED_ITEM_TYPES_TO_ITEM_TYPE);
    }

    private transient ContainerTypePath _containerType;

    /**
     * Get the implicit join path to the <code>public.container_type</code>
     * table.
     */
    public ContainerTypePath containerType() {
        if (_containerType == null)
            _containerType = new ContainerTypePath(this, Keys.ALLOWED_ITEM_TYPES__FK_ALLOWED_ITEM_TYPES_TO_CONTAINER_TYPE, null);

        return _containerType;
    }

    private transient ItemTypePath _itemType;

    /**
     * Get the implicit join path to the <code>public.item_type</code> table.
     */
    public ItemTypePath itemType() {
        if (_itemType == null)
            _itemType = new ItemTypePath(this, Keys.ALLOWED_ITEM_TYPES__FK_ALLOWED_ITEM_TYPES_TO_ITEM_TYPE, null);

        return _itemType;
    }

    @Override
    @Nonnull
    public AllowedItemTypes as(String alias) {
        return new AllowedItemTypes(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public AllowedItemTypes as(Name alias) {
        return new AllowedItemTypes(alias, this);
    }

    @Override
    @Nonnull
    public AllowedItemTypes as(Table<?> alias) {
        return new AllowedItemTypes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public AllowedItemTypes rename(String name) {
        return new AllowedItemTypes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public AllowedItemTypes rename(Name name) {
        return new AllowedItemTypes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public AllowedItemTypes rename(Table<?> name) {
        return new AllowedItemTypes(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public AllowedItemTypes where(Condition condition) {
        return new AllowedItemTypes(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public AllowedItemTypes where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public AllowedItemTypes where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public AllowedItemTypes where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public AllowedItemTypes where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public AllowedItemTypes where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public AllowedItemTypes where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public AllowedItemTypes where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public AllowedItemTypes whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public AllowedItemTypes whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
