/*
 * This file is generated by jOOQ.
 */
package jooq.tables;

import jooq.Keys;
import jooq.Public;
import jooq.tables.records.AllowedItemTypesRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AllowedItemTypes extends TableImpl<AllowedItemTypesRecord> {

    private static final long serialVersionUID = 1021093534;

    /**
     * The reference instance of <code>public.allowed_item_types</code>
     */
    public static final AllowedItemTypes ALLOWED_ITEM_TYPES = new AllowedItemTypes();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<AllowedItemTypesRecord> getRecordType() {
        return AllowedItemTypesRecord.class;
    }

    /**
     * The column <code>public.allowed_item_types.id_container_type</code>.
     */
    public final TableField<AllowedItemTypesRecord, Long> ID_CONTAINER_TYPE = createField(DSL.name("id_container_type"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.allowed_item_types.id_item_type</code>.
     */
    public final TableField<AllowedItemTypesRecord, Long> ID_ITEM_TYPE = createField(DSL.name("id_item_type"), SQLDataType.BIGINT.nullable(false), this, "");

    private AllowedItemTypes(Name alias, Table<AllowedItemTypesRecord> aliased) {
        this(alias, aliased, null);
    }

    private AllowedItemTypes(Name alias, Table<AllowedItemTypesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.allowed_item_types</code> table reference
     */
    public AllowedItemTypes(String alias) {
        this(DSL.name(alias), ALLOWED_ITEM_TYPES);
    }

    /**
     * Create an aliased <code>public.allowed_item_types</code> table reference
     */
    public AllowedItemTypes(Name alias) {
        this(alias, ALLOWED_ITEM_TYPES);
    }

    /**
     * Create a <code>public.allowed_item_types</code> table reference
     */
    public AllowedItemTypes() {
        this(DSL.name("allowed_item_types"), null);
    }

    public <O extends Record> AllowedItemTypes(Table<O> child, ForeignKey<O, AllowedItemTypesRecord> key) {
        super(child, key, ALLOWED_ITEM_TYPES);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<AllowedItemTypesRecord> getPrimaryKey() {
        return Keys.PK_ALLOWED_ITEM_TYPES;
    }

    @Override
    @Nonnull
    public List<ForeignKey<AllowedItemTypesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ALLOWED_ITEM_TYPES__FK_ALLOWED_ITEM_TYPES_TO_CONTAINER_TYPE, Keys.ALLOWED_ITEM_TYPES__FK_ALLOWED_ITEM_TYPES_TO_ITEM_TYPE);
    }

    private transient ContainerType _containerType;
    private transient ItemType _itemType;

    /**
     * Get the implicit join path to the <code>public.container_type</code>
     * table.
     */
    public ContainerType containerType() {
        if (_containerType == null)
            _containerType = new ContainerType(this, Keys.ALLOWED_ITEM_TYPES__FK_ALLOWED_ITEM_TYPES_TO_CONTAINER_TYPE);

        return _containerType;
    }

    /**
     * Get the implicit join path to the <code>public.item_type</code> table.
     */
    public ItemType itemType() {
        if (_itemType == null)
            _itemType = new ItemType(this, Keys.ALLOWED_ITEM_TYPES__FK_ALLOWED_ITEM_TYPES_TO_ITEM_TYPE);

        return _itemType;
    }

    @Override
    @Nonnull
    public AllowedItemTypes as(String alias) {
        return new AllowedItemTypes(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public AllowedItemTypes as(Name alias) {
        return new AllowedItemTypes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public AllowedItemTypes rename(String name) {
        return new AllowedItemTypes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public AllowedItemTypes rename(Name name) {
        return new AllowedItemTypes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
