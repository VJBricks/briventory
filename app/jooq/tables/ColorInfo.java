/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import jooq.Domains;
import jooq.Keys;
import jooq.Public;
import jooq.tables.Color.ColorPath;
import jooq.tables.ColorSource.ColorSourcePath;
import jooq.tables.Rgba.RgbaPath;
import jooq.tables.records.ColorInfoRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ColorInfo extends TableImpl<ColorInfoRecord> {

    private static final long serialVersionUID = 2085021859;

    /**
     * The reference instance of <code>public.color_info</code>
     */
    public static final ColorInfo COLOR_INFO = new ColorInfo();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<ColorInfoRecord> getRecordType() {
        return ColorInfoRecord.class;
    }

    /**
     * The column <code>public.color_info.id_color</code>.
     */
    public final TableField<ColorInfoRecord, Long> ID_COLOR = createField(DSL.name("id_color"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.color_info.id_color_source</code>.
     */
    public final TableField<ColorInfoRecord, Long> ID_COLOR_SOURCE = createField(DSL.name("id_color_source"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.color_info.id_rgba</code>.
     */
    public final TableField<ColorInfoRecord, Long> ID_RGBA = createField(DSL.name("id_rgba"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.color_info.name</code>.
     */
    public final TableField<ColorInfoRecord, String> NAME = createField(DSL.name("name"), Domains.DOMAIN_NAME.getDataType().nullable(false), this, "");

    /**
     * The column <code>public.color_info.color_id</code>.
     */
    public final TableField<ColorInfoRecord, Short> COLOR_ID = createField(DSL.name("color_id"), SQLDataType.SMALLINT.nullable(false), this, "");

    private ColorInfo(Name alias, Table<ColorInfoRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ColorInfo(Name alias, Table<ColorInfoRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.color_info</code> table reference
     */
    public ColorInfo(String alias) {
        this(DSL.name(alias), COLOR_INFO);
    }

    /**
     * Create an aliased <code>public.color_info</code> table reference
     */
    public ColorInfo(Name alias) {
        this(alias, COLOR_INFO);
    }

    /**
     * Create a <code>public.color_info</code> table reference
     */
    public ColorInfo() {
        this(DSL.name("color_info"), null);
    }

    public <O extends Record> ColorInfo(Table<O> path, ForeignKey<O, ColorInfoRecord> childPath, InverseForeignKey<O, ColorInfoRecord> parentPath) {
        super(path, childPath, parentPath, COLOR_INFO);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ColorInfoPath extends ColorInfo implements Path<ColorInfoRecord> {

        private static final long serialVersionUID = 2085021859;
        public <O extends Record> ColorInfoPath(Table<O> path, ForeignKey<O, ColorInfoRecord> childPath, InverseForeignKey<O, ColorInfoRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ColorInfoPath(Name alias, Table<ColorInfoRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ColorInfoPath as(String alias) {
            return new ColorInfoPath(DSL.name(alias), this);
        }

        @Override
        public ColorInfoPath as(Name alias) {
            return new ColorInfoPath(alias, this);
        }

        @Override
        public ColorInfoPath as(Table<?> alias) {
            return new ColorInfoPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<ColorInfoRecord> getPrimaryKey() {
        return Keys.PK_COLOR_INFO;
    }

    @Override
    @Nonnull
    public List<UniqueKey<ColorInfoRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_COLOR_INFO_ON_COLOR_SOURCE_AND_RGBA);
    }

    @Override
    @Nonnull
    public List<ForeignKey<ColorInfoRecord, ?>> getReferences() {
        return Arrays.asList(Keys.COLOR_INFO__FK_COLOR_INFO_TO_COLOR, Keys.COLOR_INFO__FK_COLOR_INFO_TO_COLOR_SOURCE, Keys.COLOR_INFO__FK_COLOR_INFO_TO_RGBA);
    }

    private transient ColorPath _color;

    /**
     * Get the implicit join path to the <code>public.color</code> table.
     */
    public ColorPath color() {
        if (_color == null)
            _color = new ColorPath(this, Keys.COLOR_INFO__FK_COLOR_INFO_TO_COLOR, null);

        return _color;
    }

    private transient ColorSourcePath _colorSource;

    /**
     * Get the implicit join path to the <code>public.color_source</code> table.
     */
    public ColorSourcePath colorSource() {
        if (_colorSource == null)
            _colorSource = new ColorSourcePath(this, Keys.COLOR_INFO__FK_COLOR_INFO_TO_COLOR_SOURCE, null);

        return _colorSource;
    }

    private transient RgbaPath _rgba;

    /**
     * Get the implicit join path to the <code>public.rgba</code> table.
     */
    public RgbaPath rgba() {
        if (_rgba == null)
            _rgba = new RgbaPath(this, Keys.COLOR_INFO__FK_COLOR_INFO_TO_RGBA, null);

        return _rgba;
    }

    @Override
    @Nonnull
    public ColorInfo as(String alias) {
        return new ColorInfo(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public ColorInfo as(Name alias) {
        return new ColorInfo(alias, this);
    }

    @Override
    @Nonnull
    public ColorInfo as(Table<?> alias) {
        return new ColorInfo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ColorInfo rename(String name) {
        return new ColorInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ColorInfo rename(Name name) {
        return new ColorInfo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ColorInfo rename(Table<?> name) {
        return new ColorInfo(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ColorInfo where(Condition condition) {
        return new ColorInfo(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ColorInfo where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ColorInfo where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ColorInfo where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ColorInfo where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ColorInfo where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ColorInfo where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ColorInfo where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ColorInfo whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ColorInfo whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
