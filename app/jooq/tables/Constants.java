/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import jooq.Public;
import jooq.tables.records.ConstantsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Constants extends TableImpl<ConstantsRecord> {

    private static final long serialVersionUID = -1371090629;

    /**
     * The reference instance of <code>public.constants</code>
     */
    public static final Constants CONSTANTS = new Constants();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<ConstantsRecord> getRecordType() {
        return ConstantsRecord.class;
    }

    /**
     * The column <code>public.constants.stud_to_mm_factor</code>. The factor to
     * convert a stud dimension to millimeter.
     */
    public final TableField<ConstantsRecord, Short> STUD_TO_MM_FACTOR = createField(DSL.name("stud_to_mm_factor"), SQLDataType.SMALLINT.defaultValue(DSL.field("8", SQLDataType.SMALLINT)), this, "The factor to convert a stud dimension to millimeter.");

    /**
     * The column <code>public.constants.cm_to_mm_factor</code>. The factor to
     * convert a centimeter dimension to millimeter.
     */
    public final TableField<ConstantsRecord, Short> CM_TO_MM_FACTOR = createField(DSL.name("cm_to_mm_factor"), SQLDataType.SMALLINT.defaultValue(DSL.field("10", SQLDataType.SMALLINT)), this, "The factor to convert a centimeter dimension to millimeter.");

    /**
     * The column <code>public.constants.stud_height_mm</code>. The height of a
     * stud in millimeter.
     */
    public final TableField<ConstantsRecord, Double> STUD_HEIGHT_MM = createField(DSL.name("stud_height_mm"), SQLDataType.DOUBLE.defaultValue(DSL.field("1.7", SQLDataType.DOUBLE)), this, "The height of a stud in millimeter.");

    private Constants(Name alias, Table<ConstantsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Constants(Name alias, Table<ConstantsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.constants</code> table reference
     */
    public Constants(String alias) {
        this(DSL.name(alias), CONSTANTS);
    }

    /**
     * Create an aliased <code>public.constants</code> table reference
     */
    public Constants(Name alias) {
        this(alias, CONSTANTS);
    }

    /**
     * Create a <code>public.constants</code> table reference
     */
    public Constants() {
        this(DSL.name("constants"), null);
    }

    public <O extends Record> Constants(Table<O> child, ForeignKey<O, ConstantsRecord> key) {
        super(child, key, CONSTANTS);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public Constants as(String alias) {
        return new Constants(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public Constants as(Name alias) {
        return new Constants(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Constants rename(String name) {
        return new Constants(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Constants rename(Name name) {
        return new Constants(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row3<Short, Short, Double> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
