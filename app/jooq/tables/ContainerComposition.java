/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import jooq.Keys;
import jooq.Public;
import jooq.tables.Container.ContainerPath;
import jooq.tables.Locker.LockerPath;
import jooq.tables.records.ContainerCompositionRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ContainerComposition extends TableImpl<ContainerCompositionRecord> {

    private static final long serialVersionUID = 970332214;

    /**
     * The reference instance of <code>public.container_composition</code>
     */
    public static final ContainerComposition CONTAINER_COMPOSITION = new ContainerComposition();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<ContainerCompositionRecord> getRecordType() {
        return ContainerCompositionRecord.class;
    }

    /**
     * The column <code>public.container_composition.id_container</code>.
     */
    public final TableField<ContainerCompositionRecord, Long> ID_CONTAINER = createField(DSL.name("id_container"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.container_composition.id_locker</code>.
     */
    public final TableField<ContainerCompositionRecord, Long> ID_LOCKER = createField(DSL.name("id_locker"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.container_composition.position</code>.
     */
    public final TableField<ContainerCompositionRecord, Short> POSITION = createField(DSL.name("position"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.SMALLINT)), this, "");

    private ContainerComposition(Name alias, Table<ContainerCompositionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ContainerComposition(Name alias, Table<ContainerCompositionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.container_composition</code> table
     * reference
     */
    public ContainerComposition(String alias) {
        this(DSL.name(alias), CONTAINER_COMPOSITION);
    }

    /**
     * Create an aliased <code>public.container_composition</code> table
     * reference
     */
    public ContainerComposition(Name alias) {
        this(alias, CONTAINER_COMPOSITION);
    }

    /**
     * Create a <code>public.container_composition</code> table reference
     */
    public ContainerComposition() {
        this(DSL.name("container_composition"), null);
    }

    public <O extends Record> ContainerComposition(Table<O> path, ForeignKey<O, ContainerCompositionRecord> childPath, InverseForeignKey<O, ContainerCompositionRecord> parentPath) {
        super(path, childPath, parentPath, CONTAINER_COMPOSITION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ContainerCompositionPath extends ContainerComposition implements Path<ContainerCompositionRecord> {

        private static final long serialVersionUID = 970332214;
        public <O extends Record> ContainerCompositionPath(Table<O> path, ForeignKey<O, ContainerCompositionRecord> childPath, InverseForeignKey<O, ContainerCompositionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ContainerCompositionPath(Name alias, Table<ContainerCompositionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ContainerCompositionPath as(String alias) {
            return new ContainerCompositionPath(DSL.name(alias), this);
        }

        @Override
        public ContainerCompositionPath as(Name alias) {
            return new ContainerCompositionPath(alias, this);
        }

        @Override
        public ContainerCompositionPath as(Table<?> alias) {
            return new ContainerCompositionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<ContainerCompositionRecord> getPrimaryKey() {
        return Keys.PK_CONTAINER_COMPOSITION;
    }

    @Override
    @Nonnull
    public List<UniqueKey<ContainerCompositionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_CONTAINER_COMPOSITION_ON_LOCKER);
    }

    @Override
    @Nonnull
    public List<ForeignKey<ContainerCompositionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONTAINER_COMPOSITION__FK_CONTAINER_COMPOSITION_TO_CONTAINER, Keys.CONTAINER_COMPOSITION__FK_CONTAINER_COMPOSITION_TO_LOCKER);
    }

    private transient ContainerPath _container;

    /**
     * Get the implicit join path to the <code>public.container</code> table.
     */
    public ContainerPath container() {
        if (_container == null)
            _container = new ContainerPath(this, Keys.CONTAINER_COMPOSITION__FK_CONTAINER_COMPOSITION_TO_CONTAINER, null);

        return _container;
    }

    private transient LockerPath _locker;

    /**
     * Get the implicit join path to the <code>public.locker</code> table.
     */
    public LockerPath locker() {
        if (_locker == null)
            _locker = new LockerPath(this, Keys.CONTAINER_COMPOSITION__FK_CONTAINER_COMPOSITION_TO_LOCKER, null);

        return _locker;
    }

    @Override
    @Nonnull
    public ContainerComposition as(String alias) {
        return new ContainerComposition(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public ContainerComposition as(Name alias) {
        return new ContainerComposition(alias, this);
    }

    @Override
    @Nonnull
    public ContainerComposition as(Table<?> alias) {
        return new ContainerComposition(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ContainerComposition rename(String name) {
        return new ContainerComposition(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ContainerComposition rename(Name name) {
        return new ContainerComposition(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ContainerComposition rename(Table<?> name) {
        return new ContainerComposition(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ContainerComposition where(Condition condition) {
        return new ContainerComposition(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ContainerComposition where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ContainerComposition where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ContainerComposition where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ContainerComposition where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ContainerComposition where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ContainerComposition where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ContainerComposition where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ContainerComposition whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ContainerComposition whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
