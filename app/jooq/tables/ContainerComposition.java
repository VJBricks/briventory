/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;

import jooq.Keys;
import jooq.Public;
import jooq.tables.records.ContainerCompositionRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContainerComposition extends TableImpl<ContainerCompositionRecord> {

    private static final long serialVersionUID = 577972345;

    /**
     * The reference instance of <code>public.container_composition</code>
     */
    public static final ContainerComposition CONTAINER_COMPOSITION = new ContainerComposition();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<ContainerCompositionRecord> getRecordType() {
        return ContainerCompositionRecord.class;
    }

    /**
     * The column <code>public.container_composition.id_container</code>.
     */
    public final TableField<ContainerCompositionRecord, Long> ID_CONTAINER = createField(DSL.name("id_container"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.container_composition.id_locker</code>.
     */
    public final TableField<ContainerCompositionRecord, Long> ID_LOCKER = createField(DSL.name("id_locker"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.container_composition.position</code>.
     */
    public final TableField<ContainerCompositionRecord, Short> POSITION = createField(DSL.name("position"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field("0", SQLDataType.SMALLINT)), this, "");

    private ContainerComposition(Name alias, Table<ContainerCompositionRecord> aliased) {
        this(alias, aliased, null);
    }

    private ContainerComposition(Name alias, Table<ContainerCompositionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.container_composition</code> table
     * reference
     */
    public ContainerComposition(String alias) {
        this(DSL.name(alias), CONTAINER_COMPOSITION);
    }

    /**
     * Create an aliased <code>public.container_composition</code> table
     * reference
     */
    public ContainerComposition(Name alias) {
        this(alias, CONTAINER_COMPOSITION);
    }

    /**
     * Create a <code>public.container_composition</code> table reference
     */
    public ContainerComposition() {
        this(DSL.name("container_composition"), null);
    }

    public <O extends Record> ContainerComposition(Table<O> child, ForeignKey<O, ContainerCompositionRecord> key) {
        super(child, key, CONTAINER_COMPOSITION);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<ContainerCompositionRecord> getPrimaryKey() {
        return Keys.PK_CONTAINER_COMPOSITION;
    }

    @Override
    @Nonnull
    public List<UniqueKey<ContainerCompositionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_CONTAINER_COMPOSITION_ON_LOCKER);
    }

    @Override
    @Nonnull
    public List<ForeignKey<ContainerCompositionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONTAINER_COMPOSITION__FK_CONTAINER_COMPOSITION_TO_CONTAINER, Keys.CONTAINER_COMPOSITION__FK_CONTAINER_COMPOSITION_TO_LOCKER);
    }

    private transient Container _container;
    private transient Locker _locker;

    /**
     * Get the implicit join path to the <code>public.container</code> table.
     */
    public Container container() {
        if (_container == null)
            _container = new Container(this, Keys.CONTAINER_COMPOSITION__FK_CONTAINER_COMPOSITION_TO_CONTAINER);

        return _container;
    }

    /**
     * Get the implicit join path to the <code>public.locker</code> table.
     */
    public Locker locker() {
        if (_locker == null)
            _locker = new Locker(this, Keys.CONTAINER_COMPOSITION__FK_CONTAINER_COMPOSITION_TO_LOCKER);

        return _locker;
    }

    @Override
    @Nonnull
    public ContainerComposition as(String alias) {
        return new ContainerComposition(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public ContainerComposition as(Name alias) {
        return new ContainerComposition(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ContainerComposition rename(String name) {
        return new ContainerComposition(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ContainerComposition rename(Name name) {
        return new ContainerComposition(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row3<Long, Long, Short> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
