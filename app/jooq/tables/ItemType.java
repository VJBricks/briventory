/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import jooq.Domains;
import jooq.Keys;
import jooq.Public;
import jooq.tables.AllowedItemTypes.AllowedItemTypesPath;
import jooq.tables.ContainerType.ContainerTypePath;
import jooq.tables.records.ItemTypeRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * item_type is considered as a table of constants, there is not sequence.
 */
@Generated(
    value = {
        "https://www.jooq.org"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ItemType extends TableImpl<ItemTypeRecord> {

    private static final long serialVersionUID = 111039362;

    /**
     * The reference instance of <code>public.item_type</code>
     */
    public static final ItemType ITEM_TYPE = new ItemType();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<ItemTypeRecord> getRecordType() {
        return ItemTypeRecord.class;
    }

    /**
     * The column <code>public.item_type.id</code>.
     */
    public final TableField<ItemTypeRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.item_type.name</code>.
     */
    public final TableField<ItemTypeRecord, String> NAME = createField(DSL.name("name"), Domains.DOMAIN_NAME.getDataType().nullable(false), this, "");

    /**
     * The column <code>public.item_type.code</code>.
     */
    public final TableField<ItemTypeRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>public.item_type.dimension_in_stud</code>.
     */
    public final TableField<ItemTypeRecord, Boolean> DIMENSION_IN_STUD = createField(DSL.name("dimension_in_stud"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    private ItemType(Name alias, Table<ItemTypeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ItemType(Name alias, Table<ItemTypeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("item_type is considered as a table of constants, there is not sequence."), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.item_type</code> table reference
     */
    public ItemType(String alias) {
        this(DSL.name(alias), ITEM_TYPE);
    }

    /**
     * Create an aliased <code>public.item_type</code> table reference
     */
    public ItemType(Name alias) {
        this(alias, ITEM_TYPE);
    }

    /**
     * Create a <code>public.item_type</code> table reference
     */
    public ItemType() {
        this(DSL.name("item_type"), null);
    }

    public <O extends Record> ItemType(Table<O> path, ForeignKey<O, ItemTypeRecord> childPath, InverseForeignKey<O, ItemTypeRecord> parentPath) {
        super(path, childPath, parentPath, ITEM_TYPE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ItemTypePath extends ItemType implements Path<ItemTypeRecord> {

        private static final long serialVersionUID = 111039362;
        public <O extends Record> ItemTypePath(Table<O> path, ForeignKey<O, ItemTypeRecord> childPath, InverseForeignKey<O, ItemTypeRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ItemTypePath(Name alias, Table<ItemTypeRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ItemTypePath as(String alias) {
            return new ItemTypePath(DSL.name(alias), this);
        }

        @Override
        public ItemTypePath as(Name alias) {
            return new ItemTypePath(alias, this);
        }

        @Override
        public ItemTypePath as(Table<?> alias) {
            return new ItemTypePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<ItemTypeRecord> getPrimaryKey() {
        return Keys.PK_ITEM_TYPE;
    }

    @Override
    @Nonnull
    public List<UniqueKey<ItemTypeRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_ITEM_TYPE_ON_CODE);
    }

    private transient AllowedItemTypesPath _allowedItemTypes;

    /**
     * Get the implicit to-many join path to the
     * <code>public.allowed_item_types</code> table
     */
    public AllowedItemTypesPath allowedItemTypes() {
        if (_allowedItemTypes == null)
            _allowedItemTypes = new AllowedItemTypesPath(this, null, Keys.ALLOWED_ITEM_TYPES__FK_ALLOWED_ITEM_TYPES_TO_ITEM_TYPE.getInverseKey());

        return _allowedItemTypes;
    }

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.container_type</code> table
     */
    public ContainerTypePath containerType() {
        return allowedItemTypes().containerType();
    }

    @Override
    @Nonnull
    public ItemType as(String alias) {
        return new ItemType(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public ItemType as(Name alias) {
        return new ItemType(alias, this);
    }

    @Override
    @Nonnull
    public ItemType as(Table<?> alias) {
        return new ItemType(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ItemType rename(String name) {
        return new ItemType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ItemType rename(Name name) {
        return new ItemType(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ItemType rename(Table<?> name) {
        return new ItemType(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ItemType where(Condition condition) {
        return new ItemType(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ItemType where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ItemType where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ItemType where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ItemType where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ItemType where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ItemType where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ItemType where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ItemType whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ItemType whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
