/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import jooq.Domains;
import jooq.Keys;
import jooq.Public;
import jooq.tables.Account.AccountPath;
import jooq.tables.Color.ColorPath;
import jooq.tables.ColorInfo.ColorInfoPath;
import jooq.tables.Rgba.RgbaPath;
import jooq.tables.records.ColorSourceRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;
import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ColorSource extends TableImpl<ColorSourceRecord> {

    private static final long serialVersionUID = 719129710;

    /**
     * The reference instance of <code>public.color_source</code>
     */
    public static final ColorSource COLOR_SOURCE = new ColorSource();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<ColorSourceRecord> getRecordType() {
        return ColorSourceRecord.class;
    }

    /**
     * The column <code>public.color_source.id</code>.
     */
    public final TableField<ColorSourceRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.color_source.name</code>.
     */
    public final TableField<ColorSourceRecord, String> NAME = createField(DSL.name("name"), Domains.DOMAIN_NAME.getDataType().nullable(false), this, "");

    /**
     * The column <code>public.color_source.url</code>.
     */
    public final TableField<ColorSourceRecord, String> URL = createField(DSL.name("url"), Domains.DOMAIN_URL.getDataType().nullable(false), this, "");

    private ColorSource(Name alias, Table<ColorSourceRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ColorSource(Name alias, Table<ColorSourceRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.color_source</code> table reference
     */
    public ColorSource(String alias) {
        this(DSL.name(alias), COLOR_SOURCE);
    }

    /**
     * Create an aliased <code>public.color_source</code> table reference
     */
    public ColorSource(Name alias) {
        this(alias, COLOR_SOURCE);
    }

    /**
     * Create a <code>public.color_source</code> table reference
     */
    public ColorSource() {
        this(DSL.name("color_source"), null);
    }

    public <O extends Record> ColorSource(Table<O> path, ForeignKey<O, ColorSourceRecord> childPath, InverseForeignKey<O, ColorSourceRecord> parentPath) {
        super(path, childPath, parentPath, COLOR_SOURCE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ColorSourcePath extends ColorSource implements Path<ColorSourceRecord> {

        private static final long serialVersionUID = 719129710;
        public <O extends Record> ColorSourcePath(Table<O> path, ForeignKey<O, ColorSourceRecord> childPath, InverseForeignKey<O, ColorSourceRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ColorSourcePath(Name alias, Table<ColorSourceRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ColorSourcePath as(String alias) {
            return new ColorSourcePath(DSL.name(alias), this);
        }

        @Override
        public ColorSourcePath as(Name alias) {
            return new ColorSourcePath(alias, this);
        }

        @Override
        public ColorSourcePath as(Table<?> alias) {
            return new ColorSourcePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public Identity<ColorSourceRecord, Long> getIdentity() {
        return (Identity<ColorSourceRecord, Long>) super.getIdentity();
    }

    @Override
    @Nonnull
    public UniqueKey<ColorSourceRecord> getPrimaryKey() {
        return Keys.PKEY_COLOR_SOURCE;
    }

    private transient AccountPath _account;

    /**
     * Get the implicit to-many join path to the <code>public.account</code>
     * table
     */
    public AccountPath account() {
        if (_account == null)
            _account = new AccountPath(this, null, Keys.ACCOUNT__FK_ACCOUNT_TO_COLOR_SOURCE.getInverseKey());

        return _account;
    }

    private transient ColorInfoPath _colorInfo;

    /**
     * Get the implicit to-many join path to the <code>public.color_info</code>
     * table
     */
    public ColorInfoPath colorInfo() {
        if (_colorInfo == null)
            _colorInfo = new ColorInfoPath(this, null, Keys.COLOR_INFO__FK_COLOR_INFO_TO_COLOR_SOURCE.getInverseKey());

        return _colorInfo;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.color</code>
     * table
     */
    public ColorPath color() {
        return colorInfo().color();
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.rgba</code>
     * table
     */
    public RgbaPath rgba() {
        return colorInfo().rgba();
    }

    @Override
    @Nonnull
    public ColorSource as(String alias) {
        return new ColorSource(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public ColorSource as(Name alias) {
        return new ColorSource(alias, this);
    }

    @Override
    @Nonnull
    public ColorSource as(Table<?> alias) {
        return new ColorSource(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ColorSource rename(String name) {
        return new ColorSource(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ColorSource rename(Name name) {
        return new ColorSource(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public ColorSource rename(Table<?> name) {
        return new ColorSource(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ColorSource where(Condition condition) {
        return new ColorSource(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ColorSource where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ColorSource where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ColorSource where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ColorSource where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ColorSource where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ColorSource where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public ColorSource where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ColorSource whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public ColorSource whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
