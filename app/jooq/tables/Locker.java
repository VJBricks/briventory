/*
 * This file is generated by jOOQ.
 */
package jooq.tables;

import jooq.Keys;
import jooq.Public;
import jooq.tables.records.LockerRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Locker extends TableImpl<LockerRecord> {

    private static final long serialVersionUID = -1517726244;

    /**
     * The reference instance of <code>public.locker</code>
     */
    public static final Locker LOCKER = new Locker();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<LockerRecord> getRecordType() {
        return LockerRecord.class;
    }

    /**
     * The column <code>public.locker.id</code>.
     */
    public final TableField<LockerRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.locker.id_locker_size</code>.
     */
    public final TableField<LockerRecord, Long> ID_LOCKER_SIZE = createField(DSL.name("id_locker_size"), SQLDataType.BIGINT, this, "");

    private Locker(Name alias, Table<LockerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Locker(Name alias, Table<LockerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.locker</code> table reference
     */
    public Locker(String alias) {
        this(DSL.name(alias), LOCKER);
    }

    /**
     * Create an aliased <code>public.locker</code> table reference
     */
    public Locker(Name alias) {
        this(alias, LOCKER);
    }

    /**
     * Create a <code>public.locker</code> table reference
     */
    public Locker() {
        this(DSL.name("locker"), null);
    }

    public <O extends Record> Locker(Table<O> child, ForeignKey<O, LockerRecord> key) {
        super(child, key, LOCKER);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public Identity<LockerRecord, Long> getIdentity() {
        return (Identity<LockerRecord, Long>) super.getIdentity();
    }

    @Override
    @Nonnull
    public UniqueKey<LockerRecord> getPrimaryKey() {
        return Keys.PK_LOCKER;
    }

    @Override
    @Nonnull
    public List<ForeignKey<LockerRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LOCKER__FK_LOCKER_TO_CONTAINER);
    }

    private transient LockerSize _lockerSize;

    /**
     * Get the implicit join path to the <code>public.locker_size</code> table.
     */
    public LockerSize lockerSize() {
        if (_lockerSize == null)
            _lockerSize = new LockerSize(this, Keys.LOCKER__FK_LOCKER_TO_CONTAINER);

        return _lockerSize;
    }

    @Override
    @Nonnull
    public Locker as(String alias) {
        return new Locker(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public Locker as(Name alias) {
        return new Locker(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Locker rename(String name) {
        return new Locker(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Locker rename(Name name) {
        return new Locker(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
