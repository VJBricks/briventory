/*
 * This file is generated by jOOQ.
 */
package jooq.tables;

import jooq.Keys;
import jooq.Public;
import jooq.tables.records.LockerSizeRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LockerSize extends TableImpl<LockerSizeRecord> {

    private static final long serialVersionUID = -1073417541;

    /**
     * The reference instance of <code>public.locker_size</code>
     */
    public static final LockerSize LOCKER_SIZE = new LockerSize();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<LockerSizeRecord> getRecordType() {
        return LockerSizeRecord.class;
    }

    /**
     * The column <code>public.locker_size.id</code>.
     */
    public final TableField<LockerSizeRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.locker_size.name</code>.
     */
    public final TableField<LockerSizeRecord, String> NAME = createField(DSL.name("name"), jooq.Domains.DOMAIN_NAME.getDataType(), this, "");

    /**
     * The column <code>public.locker_size.length</code>.
     */
    public final TableField<LockerSizeRecord, Double> LENGTH = createField(DSL.name("length"), jooq.Domains.DOMAIN_DIMENSION.getDataType(), this, "");

    /**
     * The column <code>public.locker_size.width</code>.
     */
    public final TableField<LockerSizeRecord, Double> WIDTH = createField(DSL.name("width"), jooq.Domains.DOMAIN_DIMENSION.getDataType(), this, "");

    /**
     * The column <code>public.locker_size.height</code>.
     */
    public final TableField<LockerSizeRecord, Double> HEIGHT = createField(DSL.name("height"), jooq.Domains.DOMAIN_DIMENSION.getDataType(), this, "");

    private LockerSize(Name alias, Table<LockerSizeRecord> aliased) {
        this(alias, aliased, null);
    }

    private LockerSize(Name alias, Table<LockerSizeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.locker_size</code> table reference
     */
    public LockerSize(String alias) {
        this(DSL.name(alias), LOCKER_SIZE);
    }

    /**
     * Create an aliased <code>public.locker_size</code> table reference
     */
    public LockerSize(Name alias) {
        this(alias, LOCKER_SIZE);
    }

    /**
     * Create a <code>public.locker_size</code> table reference
     */
    public LockerSize() {
        this(DSL.name("locker_size"), null);
    }

    public <O extends Record> LockerSize(Table<O> child, ForeignKey<O, LockerSizeRecord> key) {
        super(child, key, LOCKER_SIZE);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public Identity<LockerSizeRecord, Long> getIdentity() {
        return (Identity<LockerSizeRecord, Long>) super.getIdentity();
    }

    @Override
    @Nonnull
    public UniqueKey<LockerSizeRecord> getPrimaryKey() {
        return Keys.PK_LOCKER_SIZE;
    }

    @Override
    @Nonnull
    public List<UniqueKey<LockerSizeRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_DIMENSION_ON_DIMENSIONS);
    }

    @Override
    @Nonnull
    public LockerSize as(String alias) {
        return new LockerSize(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public LockerSize as(Name alias) {
        return new LockerSize(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public LockerSize rename(String name) {
        return new LockerSize(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public LockerSize rename(Name name) {
        return new LockerSize(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row5<Long, String, Double, Double, Double> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
