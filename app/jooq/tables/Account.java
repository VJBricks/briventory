/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import jooq.Domains;
import jooq.Keys;
import jooq.Public;
import jooq.tables.Administrator.AdministratorPath;
import jooq.tables.BricklinkTokens.BricklinkTokensPath;
import jooq.tables.BricksetTokens.BricksetTokensPath;
import jooq.tables.ColorSource.ColorSourcePath;
import jooq.tables.LockedAccount.LockedAccountPath;
import jooq.tables.PrivateContainer.PrivateContainerPath;
import jooq.tables.RebrickableTokens.RebrickableTokensPath;
import jooq.tables.records.AccountRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Account extends TableImpl<AccountRecord> {

    private static final long serialVersionUID = 1780385260;

    /**
     * The reference instance of <code>public.account</code>
     */
    public static final Account ACCOUNT = new Account();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<AccountRecord> getRecordType() {
        return AccountRecord.class;
    }

    /**
     * The column <code>public.account.id</code>.
     */
    public final TableField<AccountRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.account.id_color_source</code>.
     */
    public final TableField<AccountRecord, Long> ID_COLOR_SOURCE = createField(DSL.name("id_color_source"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.account.firstname</code>.
     */
    public final TableField<AccountRecord, String> FIRSTNAME = createField(DSL.name("firstname"), Domains.DOMAIN_NAME.getDataType().nullable(false), this, "");

    /**
     * The column <code>public.account.lastname</code>.
     */
    public final TableField<AccountRecord, String> LASTNAME = createField(DSL.name("lastname"), Domains.DOMAIN_NAME.getDataType().nullable(false), this, "");

    /**
     * The column <code>public.account.email</code>.
     */
    public final TableField<AccountRecord, String> EMAIL = createField(DSL.name("email"), Domains.DOMAIN_EMAIL.getDataType().nullable(false), this, "");

    /**
     * The column <code>public.account.password</code>.
     */
    public final TableField<AccountRecord, String> PASSWORD = createField(DSL.name("password"), Domains.DOMAIN_PASSWORD.getDataType().nullable(false), this, "");

    private Account(Name alias, Table<AccountRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Account(Name alias, Table<AccountRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.account</code> table reference
     */
    public Account(String alias) {
        this(DSL.name(alias), ACCOUNT);
    }

    /**
     * Create an aliased <code>public.account</code> table reference
     */
    public Account(Name alias) {
        this(alias, ACCOUNT);
    }

    /**
     * Create a <code>public.account</code> table reference
     */
    public Account() {
        this(DSL.name("account"), null);
    }

    public <O extends Record> Account(Table<O> path, ForeignKey<O, AccountRecord> childPath, InverseForeignKey<O, AccountRecord> parentPath) {
        super(path, childPath, parentPath, ACCOUNT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AccountPath extends Account implements Path<AccountRecord> {

        private static final long serialVersionUID = 1780385260;
        public <O extends Record> AccountPath(Table<O> path, ForeignKey<O, AccountRecord> childPath, InverseForeignKey<O, AccountRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AccountPath(Name alias, Table<AccountRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AccountPath as(String alias) {
            return new AccountPath(DSL.name(alias), this);
        }

        @Override
        public AccountPath as(Name alias) {
            return new AccountPath(alias, this);
        }

        @Override
        public AccountPath as(Table<?> alias) {
            return new AccountPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public Identity<AccountRecord, Long> getIdentity() {
        return (Identity<AccountRecord, Long>) super.getIdentity();
    }

    @Override
    @Nonnull
    public UniqueKey<AccountRecord> getPrimaryKey() {
        return Keys.PK_ACCOUNT;
    }

    @Override
    @Nonnull
    public List<UniqueKey<AccountRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_ACCOUNT_EMAIL);
    }

    @Override
    @Nonnull
    public List<ForeignKey<AccountRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACCOUNT__FK_ACCOUNT_TO_COLOR_SOURCE);
    }

    private transient ColorSourcePath _colorSource;

    /**
     * Get the implicit join path to the <code>public.color_source</code> table.
     */
    public ColorSourcePath colorSource() {
        if (_colorSource == null)
            _colorSource = new ColorSourcePath(this, Keys.ACCOUNT__FK_ACCOUNT_TO_COLOR_SOURCE, null);

        return _colorSource;
    }

    private transient AdministratorPath _administrator;

    /**
     * Get the implicit to-many join path to the
     * <code>public.administrator</code> table
     */
    public AdministratorPath administrator() {
        if (_administrator == null)
            _administrator = new AdministratorPath(this, null, Keys.ADMINISTRATOR__FK_ADMINISTRATOR_TO_ACCOUNT.getInverseKey());

        return _administrator;
    }

    private transient BricklinkTokensPath _bricklinkTokens;

    /**
     * Get the implicit to-many join path to the
     * <code>public.bricklink_tokens</code> table
     */
    public BricklinkTokensPath bricklinkTokens() {
        if (_bricklinkTokens == null)
            _bricklinkTokens = new BricklinkTokensPath(this, null, Keys.BRICKLINK_TOKENS__FK_BRICKLINK_TOKENS_TO_ACCOUNT.getInverseKey());

        return _bricklinkTokens;
    }

    private transient BricksetTokensPath _bricksetTokens;

    /**
     * Get the implicit to-many join path to the
     * <code>public.brickset_tokens</code> table
     */
    public BricksetTokensPath bricksetTokens() {
        if (_bricksetTokens == null)
            _bricksetTokens = new BricksetTokensPath(this, null, Keys.BRICKSET_TOKENS__FK_BRICKSET_TOKENS_TO_ACCOUNT.getInverseKey());

        return _bricksetTokens;
    }

    private transient LockedAccountPath _lockedAccount;

    /**
     * Get the implicit to-many join path to the
     * <code>public.locked_account</code> table
     */
    public LockedAccountPath lockedAccount() {
        if (_lockedAccount == null)
            _lockedAccount = new LockedAccountPath(this, null, Keys.LOCKED_ACCOUNT__FK_LOCKED_ACCOUNT_TO_ACCOUNT.getInverseKey());

        return _lockedAccount;
    }

    private transient PrivateContainerPath _privateContainer;

    /**
     * Get the implicit to-many join path to the
     * <code>public.private_container</code> table
     */
    public PrivateContainerPath privateContainer() {
        if (_privateContainer == null)
            _privateContainer = new PrivateContainerPath(this, null, Keys.PRIVATE_CONTAINER__FK_PRIVATE_CONTAINER_TO_ACCOUNT.getInverseKey());

        return _privateContainer;
    }

    private transient RebrickableTokensPath _rebrickableTokens;

    /**
     * Get the implicit to-many join path to the
     * <code>public.rebrickable_tokens</code> table
     */
    public RebrickableTokensPath rebrickableTokens() {
        if (_rebrickableTokens == null)
            _rebrickableTokens = new RebrickableTokensPath(this, null, Keys.REBRICKABLE_TOKENS__FK_REBRICKABLE_TOKENS_TO_ACCOUNT.getInverseKey());

        return _rebrickableTokens;
    }

    @Override
    @Nonnull
    public Account as(String alias) {
        return new Account(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public Account as(Name alias) {
        return new Account(alias, this);
    }

    @Override
    @Nonnull
    public Account as(Table<?> alias) {
        return new Account(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Account rename(String name) {
        return new Account(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Account rename(Name name) {
        return new Account(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Account rename(Table<?> name) {
        return new Account(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Account where(Condition condition) {
        return new Account(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Account where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Account where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Account where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public Account where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public Account where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public Account where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public Account where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Account whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Account whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
