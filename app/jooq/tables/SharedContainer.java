/*
 * This file is generated by jOOQ.
 */
package jooq.tables;

import jooq.Keys;
import jooq.Public;
import jooq.tables.records.SharedContainerRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SharedContainer extends TableImpl<SharedContainerRecord> {

    private static final long serialVersionUID = 755199822;

    /**
     * The reference instance of <code>public.shared_container</code>
     */
    public static final SharedContainer SHARED_CONTAINER = new SharedContainer();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<SharedContainerRecord> getRecordType() {
        return SharedContainerRecord.class;
    }

    /**
     * The column <code>public.shared_container.id_container</code>.
     */
    public final TableField<SharedContainerRecord, Long> ID_CONTAINER = createField(DSL.name("id_container"), SQLDataType.BIGINT.nullable(false), this, "");

    private SharedContainer(Name alias, Table<SharedContainerRecord> aliased) {
        this(alias, aliased, null);
    }

    private SharedContainer(Name alias, Table<SharedContainerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.shared_container</code> table reference
     */
    public SharedContainer(String alias) {
        this(DSL.name(alias), SHARED_CONTAINER);
    }

    /**
     * Create an aliased <code>public.shared_container</code> table reference
     */
    public SharedContainer(Name alias) {
        this(alias, SHARED_CONTAINER);
    }

    /**
     * Create a <code>public.shared_container</code> table reference
     */
    public SharedContainer() {
        this(DSL.name("shared_container"), null);
    }

    public <O extends Record> SharedContainer(Table<O> child, ForeignKey<O, SharedContainerRecord> key) {
        super(child, key, SHARED_CONTAINER);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public UniqueKey<SharedContainerRecord> getPrimaryKey() {
        return Keys.PK_SHARED_CONTAINER;
    }

    @Override
    @Nonnull
    public List<ForeignKey<SharedContainerRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SHARED_CONTAINER__FK_SHARED_CONTAINER_TO_CONTAINER);
    }

    private transient Container _container;

    /**
     * Get the implicit join path to the <code>public.container</code> table.
     */
    public Container container() {
        if (_container == null)
            _container = new Container(this, Keys.SHARED_CONTAINER__FK_SHARED_CONTAINER_TO_CONTAINER);

        return _container;
    }

    @Override
    @Nonnull
    public SharedContainer as(String alias) {
        return new SharedContainer(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public SharedContainer as(Name alias) {
        return new SharedContainer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public SharedContainer rename(String name) {
        return new SharedContainer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public SharedContainer rename(Name name) {
        return new SharedContainer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row1<Long> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
