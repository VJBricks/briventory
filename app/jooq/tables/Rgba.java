/*
 * This file is generated by jOOQ.
 */
package jooq.tables;

import jooq.Keys;
import jooq.Public;
import jooq.tables.records.RgbaRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rgba extends TableImpl<RgbaRecord> {

    private static final long serialVersionUID = 1126154835;

    /**
     * The reference instance of <code>public.rgba</code>
     */
    public static final Rgba RGBA = new Rgba();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<RgbaRecord> getRecordType() {
        return RgbaRecord.class;
    }

    /**
     * The column <code>public.rgba.id</code>.
     */
    public final TableField<RgbaRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.rgba.red</code>.
     */
    public final TableField<RgbaRecord, Short> RED = createField(DSL.name("red"), jooq.Domains.DOMAIN_COLOR_COMPONENT.getDataType(), this, "");

    /**
     * The column <code>public.rgba.green</code>.
     */
    public final TableField<RgbaRecord, Short> GREEN = createField(DSL.name("green"), jooq.Domains.DOMAIN_COLOR_COMPONENT.getDataType(), this, "");

    /**
     * The column <code>public.rgba.blue</code>.
     */
    public final TableField<RgbaRecord, Short> BLUE = createField(DSL.name("blue"), jooq.Domains.DOMAIN_COLOR_COMPONENT.getDataType(), this, "");

    /**
     * The column <code>public.rgba.alpha</code>.
     */
    public final TableField<RgbaRecord, Float> ALPHA = createField(DSL.name("alpha"), jooq.Domains.DOMAIN_ALPHA_COMPONENT.getDataType(), this, "");

    private Rgba(Name alias, Table<RgbaRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rgba(Name alias, Table<RgbaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.rgba</code> table reference
     */
    public Rgba(String alias) {
        this(DSL.name(alias), RGBA);
    }

    /**
     * Create an aliased <code>public.rgba</code> table reference
     */
    public Rgba(Name alias) {
        this(alias, RGBA);
    }

    /**
     * Create a <code>public.rgba</code> table reference
     */
    public Rgba() {
        this(DSL.name("rgba"), null);
    }

    public <O extends Record> Rgba(Table<O> child, ForeignKey<O, RgbaRecord> key) {
        super(child, key, RGBA);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public Identity<RgbaRecord, Long> getIdentity() {
        return (Identity<RgbaRecord, Long>) super.getIdentity();
    }

    @Override
    @Nonnull
    public UniqueKey<RgbaRecord> getPrimaryKey() {
        return Keys.PK_RGPA;
    }

    @Override
    @Nonnull
    public List<UniqueKey<RgbaRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_RGBA_ON_COMPONENTS);
    }

    @Override
    @Nonnull
    public Rgba as(String alias) {
        return new Rgba(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public Rgba as(Name alias) {
        return new Rgba(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Rgba rename(String name) {
        return new Rgba(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Rgba rename(Name name) {
        return new Rgba(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row5<Long, Short, Short, Short, Float> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
