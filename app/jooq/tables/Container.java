/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import jooq.Keys;
import jooq.Public;
import jooq.tables.ContainerComposition.ContainerCompositionPath;
import jooq.tables.ContainerType.ContainerTypePath;
import jooq.tables.Locker.LockerPath;
import jooq.tables.PrivateContainer.PrivateContainerPath;
import jooq.tables.SharedContainer.SharedContainerPath;
import jooq.tables.records.ContainerRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Container extends TableImpl<ContainerRecord> {

    private static final long serialVersionUID = -991485280;

    /**
     * The reference instance of <code>public.container</code>
     */
    public static final Container CONTAINER = new Container();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<ContainerRecord> getRecordType() {
        return ContainerRecord.class;
    }

    /**
     * The column <code>public.container.id</code>.
     */
    public final TableField<ContainerRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.container.id_container_type</code>.
     */
    public final TableField<ContainerRecord, Long> ID_CONTAINER_TYPE = createField(DSL.name("id_container_type"), SQLDataType.BIGINT, this, "");

    private Container(Name alias, Table<ContainerRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Container(Name alias, Table<ContainerRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.container</code> table reference
     */
    public Container(String alias) {
        this(DSL.name(alias), CONTAINER);
    }

    /**
     * Create an aliased <code>public.container</code> table reference
     */
    public Container(Name alias) {
        this(alias, CONTAINER);
    }

    /**
     * Create a <code>public.container</code> table reference
     */
    public Container() {
        this(DSL.name("container"), null);
    }

    public <O extends Record> Container(Table<O> path, ForeignKey<O, ContainerRecord> childPath, InverseForeignKey<O, ContainerRecord> parentPath) {
        super(path, childPath, parentPath, CONTAINER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ContainerPath extends Container implements Path<ContainerRecord> {

        private static final long serialVersionUID = -991485280;
        public <O extends Record> ContainerPath(Table<O> path, ForeignKey<O, ContainerRecord> childPath, InverseForeignKey<O, ContainerRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ContainerPath(Name alias, Table<ContainerRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ContainerPath as(String alias) {
            return new ContainerPath(DSL.name(alias), this);
        }

        @Override
        public ContainerPath as(Name alias) {
            return new ContainerPath(alias, this);
        }

        @Override
        public ContainerPath as(Table<?> alias) {
            return new ContainerPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public Identity<ContainerRecord, Long> getIdentity() {
        return (Identity<ContainerRecord, Long>) super.getIdentity();
    }

    @Override
    @Nonnull
    public UniqueKey<ContainerRecord> getPrimaryKey() {
        return Keys.PK_CONTAINER;
    }

    @Override
    @Nonnull
    public List<ForeignKey<ContainerRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONTAINER__FK_CONTAINER_TO_CONTAINER_TYPE);
    }

    private transient ContainerTypePath _containerType;

    /**
     * Get the implicit join path to the <code>public.container_type</code>
     * table.
     */
    public ContainerTypePath containerType() {
        if (_containerType == null)
            _containerType = new ContainerTypePath(this, Keys.CONTAINER__FK_CONTAINER_TO_CONTAINER_TYPE, null);

        return _containerType;
    }

    private transient ContainerCompositionPath _containerComposition;

    /**
     * Get the implicit to-many join path to the
     * <code>public.container_composition</code> table
     */
    public ContainerCompositionPath containerComposition() {
        if (_containerComposition == null)
            _containerComposition = new ContainerCompositionPath(this, null, Keys.CONTAINER_COMPOSITION__FK_CONTAINER_COMPOSITION_TO_CONTAINER.getInverseKey());

        return _containerComposition;
    }

    private transient PrivateContainerPath _privateContainer;

    /**
     * Get the implicit to-many join path to the
     * <code>public.private_container</code> table
     */
    public PrivateContainerPath privateContainer() {
        if (_privateContainer == null)
            _privateContainer = new PrivateContainerPath(this, null, Keys.PRIVATE_CONTAINER__FK_PRIVATE_CONTAINER_TO_CONTAINER.getInverseKey());

        return _privateContainer;
    }

    private transient SharedContainerPath _sharedContainer;

    /**
     * Get the implicit to-many join path to the
     * <code>public.shared_container</code> table
     */
    public SharedContainerPath sharedContainer() {
        if (_sharedContainer == null)
            _sharedContainer = new SharedContainerPath(this, null, Keys.SHARED_CONTAINER__FK_SHARED_CONTAINER_TO_CONTAINER.getInverseKey());

        return _sharedContainer;
    }

    /**
     * Get the implicit many-to-many join path to the <code>public.locker</code>
     * table
     */
    public LockerPath locker() {
        return containerComposition().locker();
    }

    @Override
    @Nonnull
    public Container as(String alias) {
        return new Container(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public Container as(Name alias) {
        return new Container(alias, this);
    }

    @Override
    @Nonnull
    public Container as(Table<?> alias) {
        return new Container(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Container rename(String name) {
        return new Container(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Container rename(Name name) {
        return new Container(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Container rename(Table<?> name) {
        return new Container(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Container where(Condition condition) {
        return new Container(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Container where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Container where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Container where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public Container where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public Container where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public Container where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    @PlainSQL
    public Container where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Container whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @Nonnull
    public Container whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
