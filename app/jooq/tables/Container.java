/*
 * This file is generated by jOOQ.
 */
package jooq.tables;

import jooq.Keys;
import jooq.Public;
import jooq.tables.records.ContainerRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.Nonnull;
import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Container extends TableImpl<ContainerRecord> {

    private static final long serialVersionUID = 3151012;

    /**
     * The reference instance of <code>public.container</code>
     */
    public static final Container CONTAINER = new Container();

    /**
     * The class holding records for this type
     */
    @Override
    @Nonnull
    public Class<ContainerRecord> getRecordType() {
        return ContainerRecord.class;
    }

    /**
     * The column <code>public.container.id</code>.
     */
    public final TableField<ContainerRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.container.id_container_type</code>.
     */
    public final TableField<ContainerRecord, Long> ID_CONTAINER_TYPE = createField(DSL.name("id_container_type"), SQLDataType.BIGINT, this, "");

    private Container(Name alias, Table<ContainerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Container(Name alias, Table<ContainerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.container</code> table reference
     */
    public Container(String alias) {
        this(DSL.name(alias), CONTAINER);
    }

    /**
     * Create an aliased <code>public.container</code> table reference
     */
    public Container(Name alias) {
        this(alias, CONTAINER);
    }

    /**
     * Create a <code>public.container</code> table reference
     */
    public Container() {
        this(DSL.name("container"), null);
    }

    public <O extends Record> Container(Table<O> child, ForeignKey<O, ContainerRecord> key) {
        super(child, key, CONTAINER);
    }

    @Override
    @Nonnull
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @Nonnull
    public Identity<ContainerRecord, Long> getIdentity() {
        return (Identity<ContainerRecord, Long>) super.getIdentity();
    }

    @Override
    @Nonnull
    public UniqueKey<ContainerRecord> getPrimaryKey() {
        return Keys.PK_CONTAINER;
    }

    @Override
    @Nonnull
    public List<ForeignKey<ContainerRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONTAINER__FK_CONTAINER_TO_CONTAINER_TYPE);
    }

    private transient ContainerType _containerType;

    /**
     * Get the implicit join path to the <code>public.container_type</code>
     * table.
     */
    public ContainerType containerType() {
        if (_containerType == null)
            _containerType = new ContainerType(this, Keys.CONTAINER__FK_CONTAINER_TO_CONTAINER_TYPE);

        return _containerType;
    }

    @Override
    @Nonnull
    public Container as(String alias) {
        return new Container(DSL.name(alias), this);
    }

    @Override
    @Nonnull
    public Container as(Name alias) {
        return new Container(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Container rename(String name) {
        return new Container(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @Nonnull
    public Container rename(Name name) {
        return new Container(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    @Nonnull
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
