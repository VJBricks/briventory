/*
 * This file is generated by jOOQ.
 */
package jooq;

import jooq.tables.*;
import jooq.tables.records.*;
import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import javax.annotation.processing.Generated;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountRecord> PK_ACCOUNT = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("pk_account"), new TableField[] { Account.ACCOUNT.ID }, true);
    public static final UniqueKey<AccountRecord> UNIQUE_ACCOUNT_EMAIL = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("unique_account_email"), new TableField[] { Account.ACCOUNT.EMAIL }, true);
    public static final UniqueKey<AdministratorRecord> PK_ADMINISTRATOR = Internal.createUniqueKey(Administrator.ADMINISTRATOR, DSL.name("pk_administrator"), new TableField[] { Administrator.ADMINISTRATOR.ID_ACCOUNT }, true);
    public static final UniqueKey<AllowedItemTypesRecord> PK_ALLOWED_ITEM_TYPES = Internal.createUniqueKey(AllowedItemTypes.ALLOWED_ITEM_TYPES, DSL.name("pk_allowed_item_types"), new TableField[] { AllowedItemTypes.ALLOWED_ITEM_TYPES.ID_CONTAINER_TYPE, AllowedItemTypes.ALLOWED_ITEM_TYPES.ID_ITEM_TYPE }, true);
    public static final UniqueKey<BricklinkTokensRecord> PK_BRICKLINK_TOKENS = Internal.createUniqueKey(BricklinkTokens.BRICKLINK_TOKENS, DSL.name("pk_bricklink_tokens"), new TableField[] { BricklinkTokens.BRICKLINK_TOKENS.ID_ACCOUNT }, true);
    public static final UniqueKey<BricksetTokensRecord> PK_BRICKSET_TOKENS = Internal.createUniqueKey(BricksetTokens.BRICKSET_TOKENS, DSL.name("pk_brickset_tokens"), new TableField[] { BricksetTokens.BRICKSET_TOKENS.ID_ACCOUNT }, true);
    public static final UniqueKey<ColorRecord> PK_COLOR = Internal.createUniqueKey(Color.COLOR, DSL.name("pk_color"), new TableField[] { Color.COLOR.ID }, true);
    public static final UniqueKey<ColorInfoRecord> PK_COLOR_INFO = Internal.createUniqueKey(ColorInfo.COLOR_INFO, DSL.name("pk_color_info"), new TableField[] { ColorInfo.COLOR_INFO.ID_COLOR, ColorInfo.COLOR_INFO.ID_COLOR_SOURCE }, true);
    public static final UniqueKey<ColorInfoRecord> UNIQUE_COLOR_INFO_ON_COLOR_SOURCE_AND_RGBA = Internal.createUniqueKey(ColorInfo.COLOR_INFO, DSL.name("unique_color_info_on_color_source_and_rgba"), new TableField[] { ColorInfo.COLOR_INFO.ID_COLOR_SOURCE, ColorInfo.COLOR_INFO.ID_RGBA }, true);
    public static final UniqueKey<ColorSourceRecord> PKEY_COLOR_SOURCE = Internal.createUniqueKey(ColorSource.COLOR_SOURCE, DSL.name("pkey_color_source"), new TableField[] { ColorSource.COLOR_SOURCE.ID }, true);
    public static final UniqueKey<ContainerRecord> PK_CONTAINER = Internal.createUniqueKey(Container.CONTAINER, DSL.name("pk_container"), new TableField[] { Container.CONTAINER.ID }, true);
    public static final UniqueKey<ContainerCompositionRecord> PK_CONTAINER_COMPOSITION = Internal.createUniqueKey(ContainerComposition.CONTAINER_COMPOSITION, DSL.name("pk_container_composition"), new TableField[] { ContainerComposition.CONTAINER_COMPOSITION.ID_CONTAINER, ContainerComposition.CONTAINER_COMPOSITION.ID_LOCKER }, true);
    public static final UniqueKey<ContainerCompositionRecord> UNIQUE_CONTAINER_COMPOSITION_ON_LOCKER = Internal.createUniqueKey(ContainerComposition.CONTAINER_COMPOSITION, DSL.name("unique_container_composition_on_locker"), new TableField[] { ContainerComposition.CONTAINER_COMPOSITION.ID_LOCKER }, true);
    public static final UniqueKey<ContainerTypeRecord> PK_CONTAINER_TYPE = Internal.createUniqueKey(ContainerType.CONTAINER_TYPE, DSL.name("pk_container_type"), new TableField[] { ContainerType.CONTAINER_TYPE.ID }, true);
    public static final UniqueKey<ItemSubTypeRecord> PK_ITEM_SUB_TYPE = Internal.createUniqueKey(ItemSubType.ITEM_SUB_TYPE, DSL.name("pk_item_sub_type"), new TableField[] { ItemSubType.ITEM_SUB_TYPE.ID_BASE_ITEM_TYPE, ItemSubType.ITEM_SUB_TYPE.ID_SUB_ITEM_TYPE }, true);
    public static final UniqueKey<ItemTypeRecord> PK_ITEM_TYPE = Internal.createUniqueKey(ItemType.ITEM_TYPE, DSL.name("pk_item_type"), new TableField[] { ItemType.ITEM_TYPE.ID }, true);
    public static final UniqueKey<ItemTypeRecord> UNIQUE_ITEM_TYPE_ON_CODE = Internal.createUniqueKey(ItemType.ITEM_TYPE, DSL.name("unique_item_type_on_code"), new TableField[] { ItemType.ITEM_TYPE.CODE }, true);
    public static final UniqueKey<LockedAccountRecord> PK_LOCKED_ACCOUNT = Internal.createUniqueKey(LockedAccount.LOCKED_ACCOUNT, DSL.name("pk_locked_account"), new TableField[] { LockedAccount.LOCKED_ACCOUNT.ID_ACCOUNT }, true);
    public static final UniqueKey<LockerRecord> PK_LOCKER = Internal.createUniqueKey(Locker.LOCKER, DSL.name("pk_locker"), new TableField[] { Locker.LOCKER.ID }, true);
    public static final UniqueKey<LockerSizeRecord> PK_LOCKER_SIZE = Internal.createUniqueKey(LockerSize.LOCKER_SIZE, DSL.name("pk_locker_size"), new TableField[] { LockerSize.LOCKER_SIZE.ID }, true);
    public static final UniqueKey<LockerSizeRecord> UNIQUE_DIMENSION_ON_DIMENSIONS = Internal.createUniqueKey(LockerSize.LOCKER_SIZE, DSL.name("unique_dimension_on_dimensions"), new TableField[] { LockerSize.LOCKER_SIZE.LENGTH, LockerSize.LOCKER_SIZE.WIDTH, LockerSize.LOCKER_SIZE.HEIGHT }, true);
    public static final UniqueKey<PrivateContainerRecord> PK_PRIVATE_CONTAINER = Internal.createUniqueKey(PrivateContainer.PRIVATE_CONTAINER, DSL.name("pk_private_container"), new TableField[] { PrivateContainer.PRIVATE_CONTAINER.ID_CONTAINER }, true);
    public static final UniqueKey<RebrickableTokensRecord> PK_REBRICKABLE_TOKENS = Internal.createUniqueKey(RebrickableTokens.REBRICKABLE_TOKENS, DSL.name("pk_rebrickable_tokens"), new TableField[] { RebrickableTokens.REBRICKABLE_TOKENS.ID_ACCOUNT }, true);
    public static final UniqueKey<RgbaRecord> PK_RGPA = Internal.createUniqueKey(Rgba.RGBA, DSL.name("pk_rgpa"), new TableField[] { Rgba.RGBA.ID }, true);
    public static final UniqueKey<RgbaRecord> UNIQUE_RGBA_ON_COMPONENTS = Internal.createUniqueKey(Rgba.RGBA, DSL.name("unique_rgba_on_components"), new TableField[] { Rgba.RGBA.RED, Rgba.RGBA.GREEN, Rgba.RGBA.BLUE, Rgba.RGBA.ALPHA }, true);
    public static final UniqueKey<SharedContainerRecord> PK_SHARED_CONTAINER = Internal.createUniqueKey(SharedContainer.SHARED_CONTAINER, DSL.name("pk_shared_container"), new TableField[] { SharedContainer.SHARED_CONTAINER.ID_CONTAINER }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AccountRecord, ColorSourceRecord> ACCOUNT__FK_ACCOUNT_TO_COLOR_SOURCE = Internal.createForeignKey(Account.ACCOUNT, DSL.name("fk_account_to_color_source"), new TableField[] { Account.ACCOUNT.ID_COLOR_SOURCE }, Keys.PKEY_COLOR_SOURCE, new TableField[] { ColorSource.COLOR_SOURCE.ID }, true);
    public static final ForeignKey<AdministratorRecord, AccountRecord> ADMINISTRATOR__FK_ADMINISTRATOR_TO_ACCOUNT = Internal.createForeignKey(Administrator.ADMINISTRATOR, DSL.name("fk_administrator_to_account"), new TableField[] { Administrator.ADMINISTRATOR.ID_ACCOUNT }, Keys.PK_ACCOUNT, new TableField[] { Account.ACCOUNT.ID }, true);
    public static final ForeignKey<AllowedItemTypesRecord, ContainerTypeRecord> ALLOWED_ITEM_TYPES__FK_ALLOWED_ITEM_TYPES_TO_CONTAINER_TYPE = Internal.createForeignKey(AllowedItemTypes.ALLOWED_ITEM_TYPES, DSL.name("fk_allowed_item_types_to_container_type"), new TableField[] { AllowedItemTypes.ALLOWED_ITEM_TYPES.ID_CONTAINER_TYPE }, Keys.PK_CONTAINER_TYPE, new TableField[] { ContainerType.CONTAINER_TYPE.ID }, true);
    public static final ForeignKey<AllowedItemTypesRecord, ItemTypeRecord> ALLOWED_ITEM_TYPES__FK_ALLOWED_ITEM_TYPES_TO_ITEM_TYPE = Internal.createForeignKey(AllowedItemTypes.ALLOWED_ITEM_TYPES, DSL.name("fk_allowed_item_types_to_item_type"), new TableField[] { AllowedItemTypes.ALLOWED_ITEM_TYPES.ID_ITEM_TYPE }, Keys.PK_ITEM_TYPE, new TableField[] { ItemType.ITEM_TYPE.ID }, true);
    public static final ForeignKey<BricklinkTokensRecord, AccountRecord> BRICKLINK_TOKENS__FK_BRICKLINK_TOKENS_TO_ACCOUNT = Internal.createForeignKey(BricklinkTokens.BRICKLINK_TOKENS, DSL.name("fk_bricklink_tokens_to_account"), new TableField[] { BricklinkTokens.BRICKLINK_TOKENS.ID_ACCOUNT }, Keys.PK_ACCOUNT, new TableField[] { Account.ACCOUNT.ID }, true);
    public static final ForeignKey<BricksetTokensRecord, AccountRecord> BRICKSET_TOKENS__FK_BRICKSET_TOKENS_TO_ACCOUNT = Internal.createForeignKey(BricksetTokens.BRICKSET_TOKENS, DSL.name("fk_brickset_tokens_to_account"), new TableField[] { BricksetTokens.BRICKSET_TOKENS.ID_ACCOUNT }, Keys.PK_ACCOUNT, new TableField[] { Account.ACCOUNT.ID }, true);
    public static final ForeignKey<ColorInfoRecord, ColorRecord> COLOR_INFO__FK_COLOR_INFO_TO_COLOR = Internal.createForeignKey(ColorInfo.COLOR_INFO, DSL.name("fk_color_info_to_color"), new TableField[] { ColorInfo.COLOR_INFO.ID_COLOR }, Keys.PK_COLOR, new TableField[] { Color.COLOR.ID }, true);
    public static final ForeignKey<ColorInfoRecord, ColorSourceRecord> COLOR_INFO__FK_COLOR_INFO_TO_COLOR_SOURCE = Internal.createForeignKey(ColorInfo.COLOR_INFO, DSL.name("fk_color_info_to_color_source"), new TableField[] { ColorInfo.COLOR_INFO.ID_COLOR_SOURCE }, Keys.PKEY_COLOR_SOURCE, new TableField[] { ColorSource.COLOR_SOURCE.ID }, true);
    public static final ForeignKey<ColorInfoRecord, RgbaRecord> COLOR_INFO__FK_COLOR_INFO_TO_RGBA = Internal.createForeignKey(ColorInfo.COLOR_INFO, DSL.name("fk_color_info_to_rgba"), new TableField[] { ColorInfo.COLOR_INFO.ID_RGBA }, Keys.PK_RGPA, new TableField[] { Rgba.RGBA.ID }, true);
    public static final ForeignKey<ContainerRecord, ContainerTypeRecord> CONTAINER__FK_CONTAINER_TO_CONTAINER_TYPE = Internal.createForeignKey(Container.CONTAINER, DSL.name("fk_container_to_container_type"), new TableField[] { Container.CONTAINER.ID_CONTAINER_TYPE }, Keys.PK_CONTAINER_TYPE, new TableField[] { ContainerType.CONTAINER_TYPE.ID }, true);
    public static final ForeignKey<ContainerCompositionRecord, ContainerRecord> CONTAINER_COMPOSITION__FK_CONTAINER_COMPOSITION_TO_CONTAINER = Internal.createForeignKey(ContainerComposition.CONTAINER_COMPOSITION, DSL.name("fk_container_composition_to_container"), new TableField[] { ContainerComposition.CONTAINER_COMPOSITION.ID_CONTAINER }, Keys.PK_CONTAINER, new TableField[] { Container.CONTAINER.ID }, true);
    public static final ForeignKey<ContainerCompositionRecord, LockerRecord> CONTAINER_COMPOSITION__FK_CONTAINER_COMPOSITION_TO_LOCKER = Internal.createForeignKey(ContainerComposition.CONTAINER_COMPOSITION, DSL.name("fk_container_composition_to_locker"), new TableField[] { ContainerComposition.CONTAINER_COMPOSITION.ID_LOCKER }, Keys.PK_LOCKER, new TableField[] { Locker.LOCKER.ID }, true);
    public static final ForeignKey<LockedAccountRecord, AccountRecord> LOCKED_ACCOUNT__FK_LOCKED_ACCOUNT_TO_ACCOUNT = Internal.createForeignKey(LockedAccount.LOCKED_ACCOUNT, DSL.name("fk_locked_account_to_account"), new TableField[] { LockedAccount.LOCKED_ACCOUNT.ID_ACCOUNT }, Keys.PK_ACCOUNT, new TableField[] { Account.ACCOUNT.ID }, true);
    public static final ForeignKey<LockerRecord, LockerSizeRecord> LOCKER__FK_LOCKER_TO_CONTAINER = Internal.createForeignKey(Locker.LOCKER, DSL.name("fk_locker_to_container"), new TableField[] { Locker.LOCKER.ID_LOCKER_SIZE }, Keys.PK_LOCKER_SIZE, new TableField[] { LockerSize.LOCKER_SIZE.ID }, true);
    public static final ForeignKey<PrivateContainerRecord, AccountRecord> PRIVATE_CONTAINER__FK_PRIVATE_CONTAINER_TO_ACCOUNT = Internal.createForeignKey(PrivateContainer.PRIVATE_CONTAINER, DSL.name("fk_private_container_to_account"), new TableField[] { PrivateContainer.PRIVATE_CONTAINER.ID_ACCOUNT }, Keys.PK_ACCOUNT, new TableField[] { Account.ACCOUNT.ID }, true);
    public static final ForeignKey<PrivateContainerRecord, ContainerRecord> PRIVATE_CONTAINER__FK_PRIVATE_CONTAINER_TO_CONTAINER = Internal.createForeignKey(PrivateContainer.PRIVATE_CONTAINER, DSL.name("fk_private_container_to_container"), new TableField[] { PrivateContainer.PRIVATE_CONTAINER.ID_CONTAINER }, Keys.PK_CONTAINER, new TableField[] { Container.CONTAINER.ID }, true);
    public static final ForeignKey<RebrickableTokensRecord, AccountRecord> REBRICKABLE_TOKENS__FK_REBRICKABLE_TOKENS_TO_ACCOUNT = Internal.createForeignKey(RebrickableTokens.REBRICKABLE_TOKENS, DSL.name("fk_rebrickable_tokens_to_account"), new TableField[] { RebrickableTokens.REBRICKABLE_TOKENS.ID_ACCOUNT }, Keys.PK_ACCOUNT, new TableField[] { Account.ACCOUNT.ID }, true);
    public static final ForeignKey<SharedContainerRecord, ContainerRecord> SHARED_CONTAINER__FK_SHARED_CONTAINER_TO_CONTAINER = Internal.createForeignKey(SharedContainer.SHARED_CONTAINER, DSL.name("fk_shared_container_to_container"), new TableField[] { SharedContainer.SHARED_CONTAINER.ID_CONTAINER }, Keys.PK_CONTAINER, new TableField[] { Container.CONTAINER.ID }, true);
}
